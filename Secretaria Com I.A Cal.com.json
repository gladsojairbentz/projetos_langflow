{
  "name": "Secretaria Com I.A Cal.com",
  "description": "Este Fluxo Foi criado pela Equipe da Fabricando Sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais?gl=BR",
  "icon": null,
  "is_component": false,
  "endpoint_name": null,
  "data": {
    "nodes": [
      {
        "id": "ChatInput-GDLZG",
        "type": "genericNode",
        "position": {
          "x": -222,
          "y": 3322.28819835039
        },
        "data": {
          "type": "ChatInput",
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "files",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\r\nfrom langflow.base.io.chat import ChatComponent\r\nfrom langflow.inputs import BoolInput\r\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\r\nfrom langflow.memory import store_message\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema import Data\r\n\r\nclass ChatInput(ChatComponent):\r\n    display_name = \"Chat Input\"\r\n    description = \"Get chat inputs from the Playground.\"\r\n    icon = \"ChatInput\"\r\n    name = \"ChatInput\"\r\n\r\n    inputs = [\r\n        MultilineInput(\r\n            name=\"input_value\",\r\n            display_name=\"Text\",\r\n            value=\"\",\r\n            info=\"Message to be passed as input.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"store_message\",\r\n            display_name=\"Store Messages\",\r\n            info=\"Store the message in the history.\",\r\n            value=True,\r\n            advanced=True,\r\n        ),\r\n        DropdownInput(\r\n            name=\"sender\",\r\n            display_name=\"Sender Type\",\r\n            options=[\"Machine\", \"User\"],\r\n            value=\"User\",\r\n            info=\"Type of sender.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"sender_name\",\r\n            display_name=\"Sender Name\",\r\n            info=\"Name of the sender.\",\r\n            value=\"User\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\r\n        ),\r\n        FileInput(\r\n            name=\"files\",\r\n            display_name=\"Files\",\r\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\r\n            info=\"Files to be sent with the message.\",\r\n            advanced=True,\r\n            is_list=True,\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Message and Session ID\", name=\"message_with_session_id\", method=\"message_with_session_id_response\"),\r\n    ]\r\n\r\n    def message_with_session_id_response(self) -> Data:\r\n        message = Message(\r\n            text=self.input_value,\r\n            sender=self.sender,\r\n            sender_name=self.sender_name,\r\n            session_id=self.session_id,\r\n            files=self.files,\r\n        )\r\n\r\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\r\n            store_message(\r\n                message,\r\n                flow_id=self.graph.flow_id,\r\n            )\r\n\r\n        response_data = Data(\r\n            message=message,\r\n            session_id=self.session_id\r\n        )\r\n\r\n        self.status = response_data\r\n        return response_data\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "pode ser dia 17/09 as 17:00\n",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "User",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID for the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "ChatInput",
            "base_classes": [
              "Data"
            ],
            "display_name": "Chat Input",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "message_with_session_id",
                "display_name": "Message and Session ID",
                "method": "message_with_session_id_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatInput-GDLZG"
        },
        "selected": false,
        "width": 384,
        "height": 298
      },
      {
        "id": "ChatOutput-a16He",
        "type": "genericNode",
        "position": {
          "x": 4153.939962234902,
          "y": 3725.8900580195964
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-a16He"
        },
        "selected": false,
        "width": 384,
        "height": 326
      },
      {
        "id": "Prompt-RS4Lh",
        "type": "genericNode",
        "position": {
          "x": 2601.692056313369,
          "y": 2825.5235178169355
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Mensagem de Entrada:\n{input_message}\n\nMemória do Chat:\n{chat_memory}\n\nTarefa:\nSe o cliente tiver uma consulta geral responda \"Passar\"\nSe o cliente demonstrar interesse em agendar um novo horário, responda com \"Roteador de Agendamento de Compromisso.\"\nSe o cliente demonstrar interesse em confirmar, alterar ou saber sobre seu agendamento existente, responda com \"Roteador de Confirmação, Consulta e Alteração de Compromisso.\"\n\nInstruções:\nPara uma consulta geral responda \"Passar\".\nPara intenção de agendar um novo horário, use \"Roteador de Agendamento de Compromisso.\"\nPara intenção de confirmar, alterar ou saber sobre um agendamento existente, use \"Roteador de Confirmação, Consulta e Alteração de Compromisso.\"\n\nExemplo de Resposta 1:\nPassar\n\nExemplo de Resposta 2:\nRoteador de Agendamento de Compromisso\n\nExemplo de Resposta 3:\nRoteador de Confirmação, Consulta e Alteração de Compromisso",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "input_message": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "input_message",
                "display_name": "input_message",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "chat_memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chat_memory",
                "display_name": "chat_memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "input_message",
                "chat_memory"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-RS4Lh"
        },
        "selected": false,
        "width": 384,
        "height": 498
      },
      {
        "id": "OllamaModel-QMYxK",
        "type": "genericNode",
        "position": {
          "x": 3077.038727349951,
          "y": 2626.8994344010225
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "mirostat": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "model_name": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "llava-llama3:latest",
                  "llama3.1:latest",
                  "mistral-nemo:latest",
                  "llama3.1:70b-instruct-q2_K",
                  "qwen2:latest",
                  "deepseek-coder-v2:latest",
                  "mixtral:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mistral-nemo:latest",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "base_url",
              "model_name",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-QMYxK"
        },
        "selected": false,
        "width": 384,
        "height": 680
      },
      {
        "id": "ConditionalRouter-5yDIk",
        "type": "genericNode",
        "position": {
          "x": 3561.7867072559284,
          "y": 2620.479556751948
        },
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import BoolInput, MessageInput, Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema.data import Data\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"Conditional Router\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    icon = \"equal\"\r\n    name = \"ConditionalRouter\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"session_id_input\",\r\n            display_name=\"Session ID\",\r\n            info=\"Session ID.\",\r\n        ),\r\n        MessageInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Result\", name=\"result\", method=\"route_message\"),\r\n        Output(display_name=\"Hello\", name=\"hello\", method=\"hello_method\"),\r\n    ]\r\n\r\n    # Definindo os textos de correspondência embutidos\r\n    match_texts = {\r\n        \"schedule_an_appointment\": \"Roteador de Agendamento de Compromisso\",\r\n        \"appointment_confirmation_and_consultation\": \"Roteador de Confirmação, Consulta e Alteração de Compromisso\"\r\n    }\r\n\r\n    def evaluate_condition(self, input_text: str, case_sensitive: bool) -> str:\r\n        if not case_sensitive:\r\n            input_text = input_text.lower()\r\n            match_texts = {k: v.lower() for k, v in self.match_texts.items()}\r\n        else:\r\n            match_texts = self.match_texts\r\n\r\n        for key, value in match_texts.items():\r\n            if value in input_text:\r\n                return key\r\n        return \"\"\r\n\r\n    def route_message(self) -> Data:\r\n        match_key = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if match_key:\r\n            route_text = self.match_texts[match_key]\r\n            return Data(data={\r\n                \"route\": route_text,\r\n                \"session_id\": self.session_id_input.text\r\n            })\r\n        else:\r\n            self.stop(\"result\")\r\n            return None\r\n\r\n    def hello_method(self) -> Message:\r\n        matched_keys = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if len(matched_keys) == 0:\r\n            return Message(text=self.input_text.text)\r\n        else:\r\n            self.stop(\"hello\")\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "session_id_input": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id_input",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Matches Regex",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Route Result",
                "method": "route_message",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "hello",
                "display_name": "Hello",
                "method": "hello_method",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "session_id_input",
              "input_text",
              "case_sensitive"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConditionalRouter-5yDIk"
        },
        "selected": false,
        "width": 384,
        "height": 484
      },
      {
        "id": "Memory-Ow7qB",
        "type": "genericNode",
        "position": {
          "x": 2128.0952238800714,
          "y": 2798.8188690779184
        },
        "data": {
          "type": "Memory",
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "memory",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "order": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "BaseChatMemory",
              "Data",
              "Message"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "display_name": "Messages (Data)",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "display_name": "Messages (Text)",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "BaseChatMemory"
                ],
                "selected": "BaseChatMemory",
                "name": "lc_memory",
                "display_name": "Memory",
                "method": "build_lc_memory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Memory-Ow7qB"
        },
        "selected": false,
        "width": 384,
        "height": 377
      },
      {
        "id": "CreateBookingComponent-WcKIZ",
        "type": "genericNode",
        "position": {
          "x": 7112.906151489403,
          "y": 3763.124493050179
        },
        "data": {
          "type": "CreateBookingComponent",
          "node": {
            "template": {
              "_type": "Component",
              "appointment_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "appointment_data",
                "display_name": "Appointment Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Data containing full name, whatsapp, email, appointment date, start time, and end time.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "api_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Cal.com API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput, DataInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport json\r\nfrom datetime import datetime\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass CreateBookingComponent(Component):\r\n    display_name = \"Create Booking Component\"\r\n    description = \"Component to create a new booking in Cal.com API.\"\r\n    icon = \"notebook-pen\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n            info=\"Pass.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"Your Cal.com API key.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"event_type_id\",\r\n            display_name=\"Event Type ID\",\r\n            info=\"ID of the event type to book.\",\r\n        ),\r\n        DataInput(\r\n            name=\"appointment_data\",\r\n            display_name=\"Appointment Data\",\r\n            info=\"Data containing full name, whatsapp, email, appointment date, start time, and end time.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"time_zone\",\r\n            display_name=\"Time Zone\",\r\n            info=\"TimeZone of the Event.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"language\",\r\n            display_name=\"Language\",\r\n            info=\"Language of the Event.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"Email of the user.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"response_location_value\",\r\n            display_name=\"Response Location Value\",\r\n            info=\"Location value in the response.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"response_location_option_value\",\r\n            display_name=\"Response Location Option Value\",\r\n            info=\"Location option value in the response.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"notes\",\r\n            display_name=\"Notes\",\r\n            info=\"Additional notes.\",\r\n        )\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Booking Data\", name=\"booking_data\", method=\"create_booking\"),\r\n    ]\r\n\r\n    def create_booking(self) -> Data:\r\n        api_key = self.api_key\r\n        event_type_id = self.event_type_id\r\n        appointment_data = self.appointment_data.data  # Access the actual data dictionary\r\n        time_zone = self.time_zone\r\n        language = self.language\r\n        user_email = self.user_email\r\n        response_location_value = self.response_location_value\r\n        response_location_option_value = self.response_location_option_value\r\n        notes = self.notes\r\n\r\n        full_name = appointment_data[\"full_name\"]\r\n        whatsapp = appointment_data[\"whatsapp\"]\r\n        email = appointment_data[\"email\"]  # Client email\r\n        appointment_date = appointment_data[\"appointment_date\"]\r\n        start_time_str = appointment_data[\"start_time\"]\r\n        end_time_str = appointment_data[\"end_time\"]\r\n\r\n        # Convert appointment_date, start_time and end_time to ISO 8601 format\r\n        date_format = \"%d/%m/%Y\"\r\n        time_format = \"%H:%M\"\r\n        iso_format = \"%Y-%m-%dT%H:%M:%S.000Z\"\r\n\r\n        try:\r\n            start_datetime = datetime.strptime(f\"{appointment_date} {start_time_str}\", f\"{date_format} {time_format}\")\r\n            end_datetime = datetime.strptime(f\"{appointment_date} {end_time_str}\", f\"{date_format} {time_format}\")\r\n\r\n            start_time_iso = start_datetime.strftime(iso_format)\r\n            end_time_iso = end_datetime.strftime(iso_format)\r\n        except ValueError as e:\r\n            return Data(data={\"error\": f\"Date format error: {str(e)}\"})\r\n\r\n        url = f\"https://api.cal.com/v1/bookings?apiKey={api_key}\"\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n        data = {\r\n            \"responses\": {\r\n                \"name\": full_name,\r\n                \"email\": email,\r\n                \"location\": {\r\n                    \"value\": response_location_value,\r\n                    \"optionValue\": response_location_option_value\r\n                },\r\n                \"notes\": notes,\r\n                \"guests\": [],\r\n                \"whatsapp\": whatsapp\r\n            },\r\n            \"user\": user_email,\r\n            \"start\": start_time_iso,\r\n            \"end\": end_time_iso,\r\n            \"eventTypeId\": int(event_type_id),\r\n            \"timeZone\": time_zone,\r\n            \"language\": language,\r\n            \"metadata\": {},\r\n            \"hasHashedBookingLink\": False\r\n        }\r\n\r\n        response = requests.post(url, headers=headers, data=json.dumps(data))\r\n\r\n        if response.status_code == 200:\r\n            booking = response.json()\r\n            return Data(data={\"booking\": booking})\r\n        else:\r\n            return Data(data={\"error\": f\"Failed to create booking: {response.status_code} {response.text}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "event_type_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "event_type_id",
                "display_name": "Event Type ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "ID of the event type to book.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "language": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "pt-BR",
                "name": "language",
                "display_name": "Language",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Language of the Event.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "notes": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "notes",
                "display_name": "Notes",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Additional notes.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Pass.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "response_location_option_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "response_location_option_value",
                "display_name": "Response Location Option Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Location option value in the response.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "response_location_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "integrations:google:meet",
                "name": "response_location_value",
                "display_name": "Response Location Value",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Location value in the response.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "time_zone": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "America/Sao_Paulo",
                "name": "time_zone",
                "display_name": "Time Zone",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "TimeZone of the Event.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_email": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "user_email",
                "display_name": "User Email",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Email of the user.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Component to create a new booking in Cal.com API.",
            "icon": "notebook-pen",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create a new booking",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "booking_data",
                "display_name": "Booking Data",
                "method": "create_booking",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "api_key",
              "event_type_id",
              "appointment_data",
              "time_zone",
              "language",
              "user_email",
              "response_location_value",
              "response_location_option_value",
              "notes"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CreateBookingComponent-WcKIZ"
        },
        "selected": false,
        "width": 384,
        "height": 1062
      },
      {
        "id": "PaginationComponent-IvzCI",
        "type": "genericNode",
        "position": {
          "x": 2463.1031069095957,
          "y": 425.0258005870096
        },
        "data": {
          "type": "PaginationComponent",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Cal.com API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "client_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "client_data",
                "display_name": "Client Data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Client data info for query.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput, IntInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PaginationComponent(Component):\r\n    display_name = \"Pagination Component\"\r\n    description = \"Component to handle pagination for retrieving bookings from Cal.com API.\"\r\n    icon = \"calendar-search\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"client_data\",\r\n            display_name=\"Client Data\",\r\n            info=\"Client data info for query.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"Your Cal.com API key.\",\r\n        ),\r\n        # IntInput(\r\n        #     name=\"take\",\r\n        #     display_name=\"Take\",\r\n        #     info=\"Maximum number of bookings per batch.\",\r\n        # ),\r\n        # IntInput(\r\n        #     name=\"page\",\r\n        #     display_name=\"Page\",\r\n        #     info=\"Page number to retrieve.\",\r\n        # ),\r\n        # MessageTextInput(\r\n        #     name=\"user_id\",\r\n        #     display_name=\"User ID\",\r\n        #     info=\"User ID for filtering bookings (admin only).\",\r\n        # ),\r\n        # MessageTextInput(\r\n        #     name=\"attendee_email\",\r\n        #     display_name=\"Attendee Email\",\r\n        #     info=\"Email of the attendee to filter bookings.\",\r\n        # ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Bookings Data\", name=\"bookings_data\", method=\"get_bookings\"),\r\n    ]\r\n\r\n    def get_bookings(self) -> Data:\r\n        api_key = self.api_key\r\n        # take = self.take\r\n        # page = self.page\r\n        # user_id = self.user_id\r\n        # attendee_email = self.attendee_email\r\n\r\n        url = \"https://api.cal.com/v1/bookings\"\r\n        params = {\r\n            \"apiKey\": api_key,\r\n            # \"take\": take,\r\n            # \"page\": page,\r\n            # \"userId\": user_id,\r\n            # \"attendeeEmail\": attendee_email\r\n        }\r\n        \r\n        # Remove None values from params\r\n        params = {k: v for k, v in params.items() if v is not None}\r\n\r\n        response = requests.get(url, params=params)\r\n        \r\n        if response.status_code == 200:\r\n            bookings = response.json()\r\n            return Data(data=bookings)\r\n        else:\r\n            return Data(data={\"error\": f\"Failed to retrieve bookings: {response.status_code} {response.text}\"})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Component to handle pagination for retrieving bookings from Cal.com API.",
            "icon": "calendar-search",
            "base_classes": [
              "Data"
            ],
            "display_name": "Find all bookings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "bookings_data",
                "display_name": "Bookings Data",
                "method": "get_bookings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "client_data",
              "api_key"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PaginationComponent-IvzCI"
        },
        "selected": false,
        "width": 384,
        "height": 412
      },
      {
        "id": "ChatOutput-1Yq6Z",
        "type": "genericNode",
        "position": {
          "x": 5277.154932649081,
          "y": 2968.747943460844
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ok! 😊 Para garantir uma comunicação suave e eficiente, você poderia, por favor, nos fornecer em uma única mensagem seu nome completo, número do WhatsApp e endereço de email? Muito obrigado! 🌟",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-1Yq6Z"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "OllamaModel-MAy54",
        "type": "genericNode",
        "position": {
          "x": 3819.2491136667404,
          "y": 1505.1046707922224
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "mirostat": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "model_name": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "llava-llama3:latest",
                  "llama3.1:latest",
                  "mistral-nemo:latest",
                  "llama3.1:70b-instruct-q2_K",
                  "qwen2:latest",
                  "deepseek-coder-v2:latest",
                  "mixtral:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mistral-nemo:latest",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "base_url",
              "model_name",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-MAy54"
        },
        "selected": false,
        "width": 384,
        "height": 680
      },
      {
        "id": "Prompt-gWxgO",
        "type": "genericNode",
        "position": {
          "x": 3246.112459611416,
          "y": 1678.368897336009
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Memória do Chat: {chat_memory}\n\n-----\nNome: {full_name}\n\nEmail: {email}\n\nWhatsapp: {whatsapp}\n\nTarefa: Verificar a memória do chat para ver se as informações (Nome, Email e Whatsapp) já existem ou se o cliente quer modificar algum dado. Dependendo da resposta do cliente, peça para ele confirmar ou modificar as informações se necessário. Caso o cliente esteja modificando uma ou duas informações, reconheça a terceira informação pelo histórico e pergunte novamente se ele quer modificar ou confirmar. Caso ele confirme, responda com \"Rota de Pronto Para o Agendamento\".\n\nSaída:\n- Saída no formato de mensagem sem explicações ou comentários adicionais.\n- Sempre peça ao cliente para confirmar as informações antes de prosseguir.\n- Se faltar alguma informação, peça para o cliente fornecer e confirmar a informação faltante.\n- Se o cliente mencionar que uma informação está incorreta, peça para ele especificar qual informação precisa ser corrigida.\n- Se o cliente fornecer uma correção, atualize a informação e peça para confirmar as informações corrigidas.\n- Se o cliente confirmar todas as informações, responda com \"Rota de Pronto Para o Agendamento\".\n\nRespostas possíveis:\n\n1. Confirmação inicial:\nPor favor, confirme se as seguintes informações estão corretas:\nNome: [nome]\nEmail: [email]\nWhatsapp: [whatsapp]\nSe alguma informação estiver incorreta, por favor, forneça a correção.\n\n2. Informação faltante:\nParece que está faltando uma informação. Por favor, forneça e confirme a informação faltante.\n\n3. Informação incorreta:\nVocê mencionou que uma informação está incorreta. Por favor, confirme qual informação precisa ser corrigida.\n\n4. Confirmar após correção:\nPor favor, confirme se as seguintes informações corrigidas estão corretas:\nNome: [novo_nome], Email: [novo_email], Whatsapp: [novo_whatsapp]. Se alguma informação ainda estiver incorreta, por favor, forneça a correção.\n\n5. Informações corretas:\nRota de Pronto Para o Agendamento\n\nResposta:\n- Caso as informações sejam confirmadas como corretas de acordo com a última mensagem do usuário na memória do chat, responda com \"Rota de Pronto Para o Agendamento\" sem aspas.\n- Não prossiga para agendamento ou qualquer outra ação sem antes confirmar todas as informações fornecidas pelo cliente.\n",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "full_name": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "full_name",
                "display_name": "full_name",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "email": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "email",
                "display_name": "email",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "whatsapp": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "whatsapp",
                "display_name": "whatsapp",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "chat_memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chat_memory",
                "display_name": "chat_memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "chat_memory",
                "full_name",
                "email",
                "whatsapp"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-gWxgO"
        },
        "selected": false,
        "width": 384,
        "height": 670
      },
      {
        "id": "CustomerDetailsComponent-xkWDp",
        "type": "genericNode",
        "position": {
          "x": 2146.6439078622034,
          "y": 2190.305709641685
        },
        "data": {
          "type": "CustomerDetailsComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport re\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass CustomerDetailsComponent(Component):\r\n    display_name = \"Customer Details Extractor\"\r\n    description = \"Extracts customer details and formats them into JSON.\"\r\n    icon = \"extract\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"customer_message\",\r\n            display_name=\"Customer Message\",\r\n            info=\"Message containing customer's full name, WhatsApp number, and email address.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Formatted JSON\", name=\"formatted_json\", method=\"extract_and_format\"),\r\n    ]\r\n\r\n    def extract_and_format(self) -> Data:\r\n        customer_message = self.customer_message\r\n\r\n        # Regex to capture email addresses (case insensitive)\r\n        email_regex = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\r\n        # Regex to capture various formats of Brazilian phone numbers, ignoring spaces, hyphens, parentheses\r\n        whatsapp_regex = r'\\b(?:\\+?55\\s?)?(\\d{2})[-.\\s]?\\(?(\\d{4,5})[-.\\s]?(\\d{4})\\)?\\b'\r\n        # Regex to capture names with variations including lowercase\r\n        name_regex = r'[A-Za-zÀ-ÖØ-öø-ÿ]+(?:\\s[A-Za-zÀ-ÖØ-öø-ÿ]+)*'\r\n\r\n        # Extracting the data\r\n        email_match = re.findall(email_regex, customer_message)\r\n        whatsapp_match = re.search(whatsapp_regex, customer_message)\r\n        \r\n        # Remove the email and WhatsApp matches from the message to isolate the name\r\n        message_without_email_whatsapp = re.sub(email_regex, '', customer_message)\r\n        message_without_email_whatsapp = re.sub(whatsapp_regex, '', message_without_email_whatsapp)\r\n\r\n        # Extract name from the cleaned message\r\n        name_match = re.findall(name_regex, message_without_email_whatsapp)\r\n\r\n        # Joining the name parts if multiple matches found\r\n        full_name = \" \".join(name_match).strip() if name_match else \"N/A\"\r\n        \r\n        # Normalize the WhatsApp number\r\n        if whatsapp_match:\r\n            area_code = whatsapp_match.group(1)\r\n            first_part = whatsapp_match.group(2)\r\n            second_part = whatsapp_match.group(3)\r\n            whatsapp = f\"+55{area_code}{first_part}{second_part}\"\r\n        else:\r\n            whatsapp = \"N/A\"\r\n        \r\n        email = email_match[0].strip() if email_match else \"N/A\"\r\n\r\n        return Data(data={\"full_name\": full_name, \"whatsapp\": whatsapp, \"email\": email})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "customer_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "customer_message",
                "display_name": "Customer Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message containing customer's full name, WhatsApp number, and email address.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Extracts customer details and formats them into JSON.",
            "icon": "extract",
            "base_classes": [
              "Data"
            ],
            "display_name": "Info to Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "formatted_json",
                "display_name": "Formatted JSON",
                "method": "extract_and_format",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "customer_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomerDetailsComponent-xkWDp"
        },
        "selected": false,
        "width": 384,
        "height": 298
      },
      {
        "id": "PostgresInsert-fVmTW",
        "type": "genericNode",
        "position": {
          "x": 4689.539958710276,
          "y": 2705.82801383009
        },
        "data": {
          "type": "PostgresInsert",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\nimport psycopg2\nfrom langflow.custom import Component\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\nfrom langflow.schema import Data\n\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\n\nclass PostgresInsertComponent(Component):\n    display_name = \"Postgres Insert\"\n    description = \"Inserts a new row into a PostgreSQL database with session_id and estado_atendimento.\"\n    icon = \"Supabase\"\n    name = \"PostgresInsert\"\n\n    inputs = [\n        StrInput(\n            name=\"supabase_host\",\n            display_name=\"Supabase Host\",\n            value=\"fasfafsddsbf.supabase.co\",  # Atualize com o hostname do seu Supabase\n        ),\n        IntInput(\n            name=\"supabase_port\",\n            display_name=\"Supabase Port\",\n            value=5432,  # Supabase geralmente usa a porta padrão 5432\n        ),\n        StrInput(\n            name=\"postgres_user\",\n            display_name=\"Postgres User\",\n            value=\"postgres\",\n        ),\n        StrInput(\n            name=\"postgres_password\",\n            display_name=\"Postgres Password\",\n            value=\"password\",\n        ),\n        StrInput(\n            name=\"postgres_db\",\n            display_name=\"Postgres Database\",\n            value=\"mydatabase\",\n        ),\n        MessageTextInput(\n            name=\"estado_atendimento\",\n            display_name=\"Estado do Atendimento\",\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"ID de Sessão\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Result\", name=\"result\", method=\"insert_data\"),\n    ]\n\n    def create_table_if_not_exists(self, cursor):\n        create_table_query = \"\"\"\n        CREATE TABLE IF NOT EXISTS atendimentos (\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\n            estado_atendimento VARCHAR(255) NOT NULL,\n            nome VARCHAR(255),\n            whatsapp VARCHAR(255),\n            email VARCHAR(255),\n            booking_id VARCHAR(255)\n        );\n        \"\"\"\n        cursor.execute(create_table_query)\n\n    def insert_data(self, *args, **kwargs) -> Data:\n        supabase_host = self.supabase_host\n        supabase_port = self.supabase_port\n        postgres_user = self.postgres_user\n        postgres_password = self.postgres_password\n        postgres_db = self.postgres_db\n        session_id = self.session_id\n        estado_atendimento = self.estado_atendimento\n\n        try:\n            conn = psycopg2.connect(\n                host=supabase_host,\n                port=supabase_port,\n                user=postgres_user,\n                password=postgres_password,\n                dbname=postgres_db\n            )\n            cursor = conn.cursor()\n            self.create_table_if_not_exists(cursor)\n            query = \"INSERT INTO atendimentos (session_id, estado_atendimento) VALUES (%s, %s)\"\n            cursor.execute(query, (session_id, estado_atendimento))\n            conn.commit()\n            cursor.close()\n            conn.close()\n            return Data(data={\"result\": \"Insert successful\"})\n        except Exception as e:\n            return Data(data={\"result\": f\"Insert failed: {str(e)}\"})",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "estado_atendimento": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "estado_atendimento",
                "display_name": "Estado do Atendimento",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Inserts a new row into a PostgreSQL database with session_id and estado_atendimento.",
            "icon": "Supabase",
            "base_classes": [
              "Data"
            ],
            "display_name": "Insert Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "insert_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "estado_atendimento",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresInsert-fVmTW"
        },
        "selected": false,
        "width": 384,
        "height": 870
      },
      {
        "id": "PostgresConditionalRouter-EC1d1",
        "type": "genericNode",
        "position": {
          "x": 821.7369234492542,
          "y": 2024.2795468064724
        },
        "data": {
          "type": "PostgresConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\nimport psycopg2\nfrom langflow.custom import Component\nfrom langflow.io import StrInput, IntInput, Output, MessageInput, MessageTextInput\nfrom langflow.schema import Data\n\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\n\nclass PostgresConditionalRouterComponent(Component):\n    display_name = \"Postgres Conditional Router\"\n    description = \"Routes an input message to a corresponding output based on session_id existence in PostgreSQL.\"\n    icon = \"equal\"\n    name = \"PostgresConditionalRouter\"\n\n    inputs = [\n        StrInput(\n            name=\"supabase_host\",\n            display_name=\"Supabase Host\",\n            value=\"jwsfdsddf.supabase.co\",  # Atualize com o hostname do seu Supabase\n        ),\n        IntInput(\n            name=\"supabase_port\",\n            display_name=\"Supabase Port\",\n            value=5432,  # Supabase geralmente usa a porta padrão 5432\n        ),\n        StrInput(\n            name=\"postgres_user\",\n            display_name=\"Postgres User\",\n            value=\"postgres\",\n        ),\n        StrInput(\n            name=\"postgres_password\",\n            display_name=\"Postgres Password\",\n            value=\"password\",\n        ),\n        StrInput(\n            name=\"postgres_db\",\n            display_name=\"Postgres Database\",\n            value=\"mydatabase\",\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through if session_id is not found or estado_atendimento is empty.\",\n        ),\n        StrInput(\n            name=\"option_1\",\n            display_name=\"Option 1\",\n            value=\"Option1\",\n        ),\n        StrInput(\n            name=\"option_2\",\n            display_name=\"Option 2\",\n            value=\"Option2\",\n        ),\n        StrInput(\n            name=\"option_3\",\n            display_name=\"Option 3\",\n            value=\"Option3\",\n        ),\n        StrInput(\n            name=\"option_4\",\n            display_name=\"Option 4\",\n            value=\"Option4\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Option 1 Route\", name=\"option_1_result\", method=\"option_1_response\"),\n        Output(display_name=\"Option 2 Route\", name=\"option_2_result\", method=\"option_2_response\"),\n        Output(display_name=\"Option 3 Route\", name=\"option_3_result\", method=\"option_3_response\"),\n        Output(display_name=\"Option 4 Route\", name=\"option_4_result\", method=\"option_4_response\"),\n        Output(display_name=\"Not Exists\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def get_session_data(self):\n        supabase_host = self.supabase_host\n        supabase_port = self.supabase_port\n        postgres_user = self.postgres_user\n        postgres_password = self.postgres_password\n        postgres_db = self.postgres_db\n        session_id = self.session_id\n    \n        try:\n            conn = psycopg2.connect(\n                host=supabase_host,\n                port=supabase_port,\n                user=postgres_user,\n                password=postgres_password,\n                dbname=postgres_db\n            )\n            cursor = conn.cursor()\n            \n            # Verifica se a tabela existe\n            cursor.execute(\"\"\"\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables \n                WHERE table_name = 'atendimentos'\n            );\n            \"\"\")\n            table_exists = cursor.fetchone()[0]\n    \n            if not table_exists:\n                cursor.close()\n                conn.close()\n                return None\n            \n            query = \"SELECT estado_atendimento FROM atendimentos WHERE session_id = %s\"\n            cursor.execute(query, (session_id,))\n            session_data = cursor.fetchone()\n            cursor.close()\n            conn.close()\n            return session_data\n        except Exception as e:\n            self.status = {\"error\": str(e)}\n            return None\n\n    def option_1_response(self) -> Data:\n        session_data = self.get_session_data()\n        if session_data and session_data[0] == self.option_1:\n            return Data(data={\"session_id\": self.session_id, \"text\":self.message.text})\n        else:\n            self.stop(\"option_1_result\")\n            return None\n\n    def option_2_response(self) -> Data:\n        session_data = self.get_session_data()\n        if session_data and session_data[0] == self.option_2:\n            return Data(data={\"session_id\": self.session_id, \"text\":self.message.text})\n        else:\n            self.stop(\"option_2_result\")\n            return None\n    \n    def option_3_response(self) -> Data:\n        session_data = self.get_session_data()\n        if session_data and session_data[0] == self.option_3:\n            return Data(data={\"session_id\": self.session_id, \"text\":self.message.text})\n        else:\n            self.stop(\"option_3_result\")\n            return None\n            \n    def option_4_response(self) -> Data:\n        session_data = self.get_session_data()\n        if session_data and session_data[0] == self.option_4:\n            return Data(data={\"session_id\": self.session_id, \"text\":self.message.text})\n        else:\n            self.stop(\"option_4_result\")\n            return None\n\n    def false_response(self) -> Data:\n        session_data = self.get_session_data()\n        if not session_data or not session_data[0]:\n            return Data(data={\"session_id\": self.session_id, \"text\":self.message.text})\n        else:\n            self.stop(\"false_result\")\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through if session_id is not found or estado_atendimento is empty.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "option_1": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Roteador de Agendamento de Compromisso",
                "name": "option_1",
                "display_name": "Option 1",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "option_2": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Roteador de Confirmação, Consulta e Alteração de Compromisso",
                "name": "option_2",
                "display_name": "Option 2",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "option_3": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Rota de Pronto Para o Agendamento",
                "name": "option_3",
                "display_name": "Option 3",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "option_4": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Finalização do Atendimento",
                "name": "option_4",
                "display_name": "Option 4",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "jdasijsaidjadsif232",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres.jwiempjmzvhvwdycwyxq",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "aws-0-sa-east-1.pooler.supabase.com",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Routes an input message to a corresponding output based on session_id existence in PostgreSQL.",
            "icon": "equal",
            "base_classes": [
              "Data"
            ],
            "display_name": "Router Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "option_1_result",
                "display_name": "Option 1 Route",
                "method": "option_1_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "option_2_result",
                "display_name": "Option 2 Route",
                "method": "option_2_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "option_3_result",
                "display_name": "Option 3 Route",
                "method": "option_3_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "option_4_result",
                "display_name": "Option 4 Route",
                "method": "option_4_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "false_result",
                "display_name": "Not Exists",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "session_id",
              "message",
              "option_1",
              "option_2",
              "option_3",
              "option_4"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresConditionalRouter-EC1d1"
        },
        "selected": false,
        "width": 384,
        "height": 1392
      },
      {
        "id": "ParseData-eojHH",
        "type": "genericNode",
        "position": {
          "x": 300.3146578361509,
          "y": 3530.0833075898013
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{data[message].text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-eojHH"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-9cpmu",
        "type": "genericNode",
        "position": {
          "x": 305.9818567886266,
          "y": 2955.6135855819794
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-9cpmu"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-W0kuk",
        "type": "genericNode",
        "position": {
          "x": 2630.1553797236274,
          "y": 1534.1310899450066
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{full_name}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-W0kuk"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-C2RQ8",
        "type": "genericNode",
        "position": {
          "x": 2626.3424862512393,
          "y": 1962.46638029435
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{email}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-C2RQ8"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-wBgty",
        "type": "genericNode",
        "position": {
          "x": 2623.703470601417,
          "y": 2384.708884265995
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{whatsapp}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-wBgty"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ChatOutput-PwtEn",
        "type": "genericNode",
        "position": {
          "x": 4360.29729371077,
          "y": 2285.4421947891133
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-PwtEn"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "CustomerDetailsComponent-Sf4hp",
        "type": "genericNode",
        "position": {
          "x": 2275.924393059647,
          "y": -3.835318787223514
        },
        "data": {
          "type": "CustomerDetailsComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport re\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass CustomerDetailsComponent(Component):\r\n    display_name = \"Customer Details Extractor\"\r\n    description = \"Extracts customer details and formats them into JSON.\"\r\n    icon = \"extract\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"customer_message\",\r\n            display_name=\"Customer Message\",\r\n            info=\"Message containing customer's full name, WhatsApp number, and email address.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Formatted JSON\", name=\"formatted_json\", method=\"extract_and_format\"),\r\n    ]\r\n\r\n    def extract_and_format(self) -> Data:\r\n        customer_message = self.customer_message\r\n\r\n        # Regex to capture email addresses (case insensitive)\r\n        email_regex = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\r\n        # Regex to capture various formats of Brazilian phone numbers, ignoring spaces, hyphens, parentheses\r\n        whatsapp_regex = r'\\b(?:\\+?55\\s?)?(\\d{2})[-.\\s]?\\(?(\\d{4,5})[-.\\s]?(\\d{4})\\)?\\b'\r\n        # Regex to capture names with variations including lowercase\r\n        name_regex = r'[A-Za-zÀ-ÖØ-öø-ÿ]+(?:\\s[A-Za-zÀ-ÖØ-öø-ÿ]+)*'\r\n\r\n        # Extracting the data\r\n        email_match = re.findall(email_regex, customer_message)\r\n        whatsapp_match = re.search(whatsapp_regex, customer_message)\r\n        \r\n        # Remove the email and WhatsApp matches from the message to isolate the name\r\n        message_without_email_whatsapp = re.sub(email_regex, '', customer_message)\r\n        message_without_email_whatsapp = re.sub(whatsapp_regex, '', message_without_email_whatsapp)\r\n\r\n        # Extract name from the cleaned message\r\n        name_match = re.findall(name_regex, message_without_email_whatsapp)\r\n\r\n        # Joining the name parts if multiple matches found\r\n        full_name = \" \".join(name_match).strip() if name_match else \"N/A\"\r\n        \r\n        # Normalize the WhatsApp number\r\n        if whatsapp_match:\r\n            area_code = whatsapp_match.group(1)\r\n            first_part = whatsapp_match.group(2)\r\n            second_part = whatsapp_match.group(3)\r\n            whatsapp = f\"+55{area_code}{first_part}{second_part}\"\r\n        else:\r\n            whatsapp = \"N/A\"\r\n        \r\n        email = email_match[0].strip() if email_match else \"N/A\"\r\n\r\n        return Data(data={\"full_name\": full_name, \"whatsapp\": whatsapp, \"email\": email})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "customer_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "customer_message",
                "display_name": "Customer Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message containing customer's full name, WhatsApp number, and email address.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Extracts customer details and formats them into JSON.",
            "icon": "extract",
            "base_classes": [
              "Data"
            ],
            "display_name": "Info to Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "formatted_json",
                "display_name": "Formatted JSON",
                "method": "extract_and_format",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "customer_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomerDetailsComponent-Sf4hp"
        },
        "selected": false,
        "width": 384,
        "height": 298
      },
      {
        "id": "ParseData-YPbzi",
        "type": "genericNode",
        "position": {
          "x": 4082.8431779230114,
          "y": 3255.463766000325
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-YPbzi"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-lVm3b",
        "type": "genericNode",
        "position": {
          "x": 4056.428554643322,
          "y": 2766.103595400338
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{route}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-lVm3b"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "Memory-uFr42",
        "type": "genericNode",
        "position": {
          "x": 2613.8934252724885,
          "y": 1028.5433599675716
        },
        "data": {
          "type": "Memory",
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "memory",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "order": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "BaseChatMemory",
              "Data",
              "Message"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "display_name": "Messages (Data)",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "display_name": "Messages (Text)",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "BaseChatMemory"
                ],
                "selected": "BaseChatMemory",
                "name": "lc_memory",
                "display_name": "Memory",
                "method": "build_lc_memory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Memory-uFr42"
        },
        "selected": false,
        "width": 384,
        "height": 377
      },
      {
        "id": "PostgresUpdate-uxvId",
        "type": "genericNode",
        "position": {
          "x": 5249.307351346697,
          "y": 1565.6325966279317
        },
        "data": {
          "type": "PostgresUpdate",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresUpdateComponent(Component):\r\n    display_name = \"Postgres Update\"\r\n    description = \"Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresUpdate\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"estado_atendimento\",\r\n            display_name=\"Estado do Atendimento\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"upsert_data\"),\r\n    ]\r\n\r\n    def create_table_if_not_exists(self, cursor):\r\n        create_table_query = \"\"\"\r\n        CREATE TABLE IF NOT EXISTS atendimentos (\r\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\r\n            estado_atendimento VARCHAR(255) NOT NULL,\r\n            nome VARCHAR(255),\r\n            whatsapp VARCHAR(255),\r\n            email VARCHAR(255),\r\n            booking_id VARCHAR(255),\r\n            PRIMARY KEY (session_id)\r\n        );\r\n        \"\"\"\r\n        cursor.execute(create_table_query)\r\n\r\n    def upsert_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n        estado_atendimento = self.estado_atendimento\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            self.create_table_if_not_exists(cursor)\r\n            query = \"\"\"\r\n            INSERT INTO atendimentos (session_id, estado_atendimento) \r\n            VALUES (%s, %s)\r\n            ON CONFLICT (session_id) DO UPDATE \r\n            SET estado_atendimento = EXCLUDED.estado_atendimento;\r\n            \"\"\"\r\n            cursor.execute(query, (session_id, estado_atendimento))\r\n            conn.commit()\r\n            cursor.close()\r\n            conn.close()\r\n            return Data(data={\"result\": \"Upsert successful\"})\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Upsert failed: {str(e)}\"})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "estado_atendimento": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "estado_atendimento",
                "display_name": "Estado do Atendimento",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Update Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "upsert_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "estado_atendimento",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresUpdate-uxvId"
        },
        "selected": false,
        "width": 384,
        "height": 870
      },
      {
        "id": "ConditionalRouter-pRooK",
        "type": "genericNode",
        "position": {
          "x": 4328.060985317458,
          "y": 1734.5235555292757
        },
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import BoolInput, MessageInput, Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema.data import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"Conditional Router\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    icon = \"equal\"\r\n    name = \"ConditionalRouter\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"session_id_input\",\r\n            display_name=\"Session ID\",\r\n            info=\"Session ID.\",\r\n        ),\r\n        MessageInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Result\", name=\"result\", method=\"route_message\"),\r\n        Output(display_name=\"Hello\", name=\"hello\", method=\"hello_method\"),\r\n    ]\r\n\r\n    # Definindo os textos de correspondência embutidos\r\n    match_texts = {\r\n        \"ok_for_scheduling\": \"Rota de Pronto Para o Agendamento\"\r\n    }\r\n\r\n    def evaluate_condition(self, input_text: str, case_sensitive: bool) -> str:\r\n        if not case_sensitive:\r\n            input_text = input_text.lower()\r\n            match_texts = {k: v.lower() for k, v in self.match_texts.items()}\r\n        else:\r\n            match_texts = self.match_texts\r\n\r\n        for key, value in match_texts.items():\r\n            if value in input_text:\r\n                return key\r\n        return \"\"\r\n\r\n    def route_message(self) -> Data:\r\n        match_key = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if match_key:\r\n            route_text = self.match_texts[match_key]\r\n            return Data(data={\r\n                \"route\": route_text,\r\n                \"session_id\": self.session_id_input.text\r\n            })\r\n        else:\r\n            self.stop(\"result\")\r\n            return None\r\n\r\n    def hello_method(self) -> Message:\r\n        matched_keys = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if len(matched_keys) == 0:\r\n            return Message(text=self.input_text.text)\r\n        else:\r\n            self.stop(\"hello\")\r\n            return None",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "session_id_input": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id_input",
                "display_name": "Session ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Session ID.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Matches Regex",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Route Result",
                "method": "route_message",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "hello",
                "display_name": "Hello",
                "method": "hello_method",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "session_id_input",
              "input_text",
              "case_sensitive"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConditionalRouter-pRooK"
        },
        "selected": false,
        "width": 384,
        "height": 484
      },
      {
        "id": "ChatOutput-WoFSp",
        "type": "genericNode",
        "position": {
          "x": 5716.31014503843,
          "y": 2080.112162041297
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ok! 😊 Seus dados foram confirmados. Agora, vamos verificar os horários disponíveis para o agendamento. Você tem alguma data e horário de preferência? ⏰",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-WoFSp"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-uQXKT",
        "type": "genericNode",
        "position": {
          "x": 4793.5198610676825,
          "y": 1688.4889473331352
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{route}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-uQXKT"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-poiA4",
        "type": "genericNode",
        "position": {
          "x": 4806.0577106948485,
          "y": 2135.5997302888313
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-poiA4"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-r1OTP",
        "type": "genericNode",
        "position": {
          "x": 1456.6788874454492,
          "y": 4466.19214535078
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-r1OTP"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-Zwsfq",
        "type": "genericNode",
        "position": {
          "x": 1467.676748306465,
          "y": 3947.5725058859707
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-Zwsfq"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-fZPhy",
        "type": "genericNode",
        "position": {
          "x": 1666.1532555157273,
          "y": 2719.200292647872
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-fZPhy"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-U8XDu",
        "type": "genericNode",
        "position": {
          "x": 1659.2289092635774,
          "y": 3152.0982790428125
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-U8XDu"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-3Oncw",
        "type": "genericNode",
        "position": {
          "x": 1636.1748786705489,
          "y": 1795.4180551117847
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-3Oncw"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-UW2iX",
        "type": "genericNode",
        "position": {
          "x": 1649.9496581440385,
          "y": 2242.25915311152
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-UW2iX"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "DateTimeComponent-msIA6",
        "type": "genericNode",
        "position": {
          "x": 2169.113678553618,
          "y": 4261.1899885799085
        },
        "data": {
          "type": "DateTimeComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass DateTimeComponent(Component):\r\n    display_name = \"Date Time Component\"\r\n    description = \"Gets the current date and time for São Paulo from an API and passes a message to the output.\"\r\n    icon = \"clock\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_message\",\r\n            display_name=\"Input Message\",\r\n            info=\"Message to be passed to the output.\",\r\n        )\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Date Time Output\", name=\"datetime_output\", method=\"get_datetime\"),\r\n        Output(display_name=\"Message Output\", name=\"message_output\", method=\"get_message\"),\r\n    ]\r\n\r\n    def get_datetime(self) -> Data:\r\n        response = requests.get('http://worldtimeapi.org/api/timezone/America/Sao_Paulo')\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return Data(data=data)\r\n        else:\r\n            return None\r\n\r\n    def get_message(self) -> Message:\r\n        input_message = self.input_message\r\n        return Message(text=input_message)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_message",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed to the output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Gets the current date and time for São Paulo from an API and passes a message to the output.",
            "icon": "clock",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Date Time",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "datetime_output",
                "display_name": "Date Time Output",
                "method": "get_datetime",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message_output",
                "display_name": "Message Output",
                "method": "get_message",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "DateTimeComponent-msIA6"
        },
        "selected": false,
        "width": 384,
        "height": 398
      },
      {
        "id": "ParseData-0ND0q",
        "type": "genericNode",
        "position": {
          "x": 2674.628203864089,
          "y": 4321.963114338035
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{datetime}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-0ND0q"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "Memory-vu1W7",
        "type": "genericNode",
        "position": {
          "x": 2962.9121459876314,
          "y": 4942.794978584624
        },
        "data": {
          "type": "Memory",
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "memory",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "order": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "BaseChatMemory",
              "Data",
              "Message"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "display_name": "Messages (Data)",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "display_name": "Messages (Text)",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "BaseChatMemory"
                ],
                "selected": "BaseChatMemory",
                "name": "lc_memory",
                "display_name": "Memory",
                "method": "build_lc_memory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Memory-vu1W7"
        },
        "selected": false,
        "width": 384,
        "height": 377
      },
      {
        "id": "OllamaModel-SHGLN",
        "type": "genericNode",
        "position": {
          "x": 4001.3497007723463,
          "y": 4219.27751461826
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "mirostat": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "model_name": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "llava-llama3:latest",
                  "llama3.1:latest",
                  "mistral-nemo:latest",
                  "llama3.1:70b-instruct-q2_K",
                  "qwen2:latest",
                  "deepseek-coder-v2:latest",
                  "mixtral:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mistral-nemo:latest",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "base_url",
              "model_name",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-SHGLN"
        },
        "selected": false,
        "width": 384,
        "height": 680
      },
      {
        "id": "Prompt-OA7ek",
        "type": "genericNode",
        "position": {
          "x": 3454.6404556768166,
          "y": 4256.545635537848
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Memória do Chat: {chat_memory}\nMensagem do Chat: {message}\nData Atual: {date_now}\n\n---\nDado o contexto acima, responda à seguinte pergunta com um dos exemplos abaixo, sem citar \"Resposta:\" completando as variáveis depois de \":\".\n\nExemplo 1 (Preencha os campos baseado na Memória do Chat):\nNome: [nome]\nEmail: [email]\nWhatsapp: [whatsapp]\nData do agendamento: [data_agendamento]\nHorário do agendamento: [horario_agendamento]\n\nExemplo 2:\nOk. Você pode me informar sua preferência de dia e horário, por favor?\n\n---\nSe o usuário não mencionar uma data específica ou não for possível determinar a data, responda exatamente com:\nOk. Você pode me informar sua preferência de dia e horário, por favor?\n\nSe a mensagem do usuário indicar uma data específica, como \"dia 17 às 13 horas\", \"tem para daqui x dias?\", \"pode ser para daqui x semanas?\", \"consegue daqui um mês?\", \"pode ser dia x?\", \"pode ser dia DD/MM?\", ou qualquer outra referência temporal, calcule a data de agendamento com base nas instruções do usuário.\n\nUtilize a técnica de autoconsistência para calcular a data de agendamento de maneira precisa:\n\n1. Se o usuário mencionar um dia específico do mês (por exemplo, \"dia 17 às 13 horas\"):\n   - Extraia o dia e o horário da mensagem.\n   - Use a Data Atual para determinar o mês e o ano. Se o dia já passou no mês atual, ajuste para o próximo mês.\n   - Calcule a data de agendamento para esse dia e mês no ano atual ou no próximo mês, se necessário.\n\n2. Se o usuário mencionar \"dias\":\n   - Extraia o número de dias da mensagem.\n   - Calcule a data de agendamento somando esse número de dias à Data Atual.\n   - Verifique a consistência do cálculo para garantir a precisão.\n\n3. Se o usuário mencionar \"semanas\":\n   - Extraia o número de semanas da mensagem.\n   - Calcule a data de agendamento somando esse número de semanas à Data Atual.\n   - Verifique a consistência do cálculo para garantir a precisão.\n\n4. Se o usuário mencionar \"mês\":\n   - Calcule a data de agendamento somando um mês à Data Atual.\n   - Verifique a consistência do cálculo para garantir a precisão.\n\n5. Se o usuário mencionar \"dia\" no formato DD/MM:\n   - Extraia o dia e o mês da mensagem.\n   - Calcule a data de agendamento para esse dia e mês no ano atual.\n   - Verifique a consistência do cálculo para garantir a precisão.\n\n6. Se o usuário mencionar uma data de outra forma, como \"daqui a duas semanas\" ou \"no próximo mês\":\n   - Interprete a referência temporal.\n   - Calcule a data de agendamento.\n   - Verifique a consistência do cálculo para garantir a precisão.\n\nPara todas as respostas que não seguem o contexto do agendamento, como perguntas sobre outros assuntos, responda com:\nOk. Você pode me informar sua preferência de dia e horário, por favor?\n\nExemplo de resposta 1 (Preencha os campos baseado na Memória do Chat):\nNome: Diego Marino\nEmail: diego@example.com\nWhatsapp: +55123456789\nData do agendamento: 2024-08-17\nHorário do agendamento: 13:00\n\nExemplo de resposta 1:\nOk. Você pode me informar sua preferência de dia e horário, por favor?\n\n",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "chat_memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chat_memory",
                "display_name": "chat_memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "message": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "message",
                "display_name": "message",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "date_now": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "date_now",
                "display_name": "date_now",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "chat_memory",
                "message",
                "date_now"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-OA7ek"
        },
        "selected": false,
        "width": 384,
        "height": 584
      },
      {
        "id": "PostgresUpdate-gpILq",
        "type": "genericNode",
        "position": {
          "x": 8359.059094413567,
          "y": 3845.011735838727
        },
        "data": {
          "type": "PostgresUpdate",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresUpdateComponent(Component):\r\n    display_name = \"Postgres Update\"\r\n    description = \"Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresUpdate\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"estado_atendimento\",\r\n            display_name=\"Estado do Atendimento\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"upsert_data\"),\r\n    ]\r\n\r\n    def create_table_if_not_exists(self, cursor):\r\n        create_table_query = \"\"\"\r\n        CREATE TABLE IF NOT EXISTS atendimentos (\r\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\r\n            estado_atendimento VARCHAR(255) NOT NULL,\r\n            nome VARCHAR(255),\r\n            whatsapp VARCHAR(255),\r\n            email VARCHAR(255),\r\n            booking_id VARCHAR(255),\r\n            PRIMARY KEY (session_id)\r\n        );\r\n        \"\"\"\r\n        cursor.execute(create_table_query)\r\n\r\n    def upsert_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n        estado_atendimento = self.estado_atendimento\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            self.create_table_if_not_exists(cursor)\r\n            query = \"\"\"\r\n            INSERT INTO atendimentos (session_id, estado_atendimento) \r\n            VALUES (%s, %s)\r\n            ON CONFLICT (session_id) DO UPDATE \r\n            SET estado_atendimento = EXCLUDED.estado_atendimento;\r\n            \"\"\"\r\n            cursor.execute(query, (session_id, estado_atendimento))\r\n            conn.commit()\r\n            cursor.close()\r\n            conn.close()\r\n            return Data(data={\"result\": \"Upsert successful\"})\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Upsert failed: {str(e)}\"})\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "estado_atendimento": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Finalização do Atendimento",
                "name": "estado_atendimento",
                "display_name": "Estado do Atendimento",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Update Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "upsert_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "estado_atendimento",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresUpdate-gpILq"
        },
        "selected": false,
        "width": 384,
        "height": 956,
        "positionAbsolute": {
          "x": 8359.059094413567,
          "y": 3845.011735838727
        },
        "dragging": false
      },
      {
        "id": "CustomerDetailsComponent-ACbg6",
        "type": "genericNode",
        "position": {
          "x": 4974.150783593167,
          "y": 4516.907940981715
        },
        "data": {
          "type": "CustomerDetailsComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\nimport re\r\nfrom datetime import datetime, timedelta\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass CustomerDetailsComponent(Component):\r\n    display_name = \"Customer Details Extractor\"\r\n    description = \"Extracts customer details and formats them into JSON.\"\r\n    icon = \"extract\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"customer_message\",\r\n            display_name=\"Customer Message\",\r\n            info=\"Message containing customer's full name, WhatsApp number, email address, and appointment date and time.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Formatted JSON\", name=\"formatted_json\", method=\"extract_and_format\"),\r\n    ]\r\n\r\n    def extract_and_format(self) -> Data:\r\n        customer_message = self.customer_message\r\n\r\n        # Splitting the message into lines for better processing\r\n        lines = customer_message.split('\\n')\r\n\r\n        # Regex patterns\r\n        email_regex = r'Email:\\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})'\r\n        whatsapp_regex = r'Whatsapp:\\s*(\\+?55\\s?\\d{2}[-.\\s]?\\d{4,5}[-.\\s]?\\d{4})'\r\n        name_regex = r'Nome:\\s*([A-Za-zÀ-ÖØ-öø-ÿ\\s]+)'\r\n        date_regex = r'Data do agendamento:\\s*(\\d{4}-\\d{2}-\\d{2})'\r\n        time_regex = r'Horário do agendamento:\\s*(\\d{2}:\\d{2})'\r\n\r\n        # Extracting the data\r\n        full_name = email = whatsapp = \"N/A\"\r\n        appointment_date = start_time_str = end_time_str = None\r\n\r\n        for line in lines:\r\n            name_match = re.search(name_regex, line)\r\n            email_match = re.search(email_regex, line)\r\n            whatsapp_match = re.search(whatsapp_regex, line)\r\n            date_match = re.search(date_regex, line)\r\n            time_match = re.search(time_regex, line)\r\n\r\n            if name_match:\r\n                full_name = name_match.group(1).strip()\r\n            elif email_match:\r\n                email = email_match.group(1).strip()\r\n            elif whatsapp_match:\r\n                whatsapp = whatsapp_match.group(1).strip()\r\n            elif date_match:\r\n                # Convert the date to the desired format dd/mm/yyyy\r\n                appointment_date = datetime.strptime(date_match.group(1).strip(), \"%Y-%m-%d\").strftime(\"%d/%m/%Y\")\r\n                self.appointment_date = appointment_date\r\n            elif time_match:\r\n                time_str = time_match.group(1).strip()\r\n                start_time = datetime.strptime(f\"{appointment_date} {time_str}\", \"%d/%m/%Y %H:%M\")\r\n                end_time = start_time + timedelta(minutes=30)\r\n                start_time_str = start_time.strftime(\"%H:%M\")\r\n                end_time_str = end_time.strftime(\"%H:%M\")\r\n\r\n        if start_time_str is None or end_time_str is None:\r\n            # Pergunta ao usuário sobre a preferência de data se não foi mencionada\r\n            appointment_date = \"Por favor, forneça uma data preferida para o agendamento.\"\r\n        \r\n        return Data(data={\r\n            \"full_name\": full_name,\r\n            \"whatsapp\": whatsapp,\r\n            \"email\": email,\r\n            \"appointment_date\": appointment_date,\r\n            \"start_time\": start_time_str,\r\n            \"end_time\": end_time_str\r\n        })\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "customer_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "customer_message",
                "display_name": "Customer Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message containing customer's full name, WhatsApp number, email address, and appointment date and time.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Extracts customer details and formats them into JSON.",
            "icon": "extract",
            "base_classes": [
              "Data"
            ],
            "display_name": "Info to Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "formatted_json",
                "display_name": "Formatted JSON",
                "method": "extract_and_format",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "customer_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "CustomerDetailsComponent-ACbg6"
        },
        "selected": false,
        "width": 384,
        "height": 298
      },
      {
        "id": "ChatOutput-OfZfB",
        "type": "genericNode",
        "position": {
          "x": 7660.585382489064,
          "y": 4447.978038221655
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Tudo Certo! Seu horário foi agendado! Até Logo!",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-OfZfB"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-G1Pr7",
        "type": "genericNode",
        "position": {
          "x": 1797.0549005618243,
          "y": -36.625
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-G1Pr7"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-lJbL7",
        "type": "genericNode",
        "position": {
          "x": 1806.1255551614267,
          "y": 426.4190548179554
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-lJbL7"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "EditBookingComponent-2Mi8s",
        "type": "genericNode",
        "position": {
          "x": 6100.061891492465,
          "y": 5674.070424435963
        },
        "data": {
          "type": "EditBookingComponent",
          "node": {
            "template": {
              "_type": "Component",
              "appointment_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "appointment_data",
                "display_name": "Appointment Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Data containing appointment date, start time, and end time.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "api_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Cal.com API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "booking_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "booking_id",
                "display_name": "Booking ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "ID of the booking to edit.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput, DataInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport json\r\nfrom datetime import datetime\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass EditBookingComponent(Component):\r\n    display_name = \"Edit Booking Component\"\r\n    description = \"Component to edit an existing booking in Cal.com API.\"\r\n    icon = \"book-up-2\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"Your Cal.com API key.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"booking_id\",\r\n            display_name=\"Booking ID\",\r\n            info=\"ID of the booking to edit.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"title\",\r\n            display_name=\"Title\",\r\n            info=\"Booking event title.\",\r\n        ),\r\n        DataInput(\r\n            name=\"appointment_data\",\r\n            display_name=\"Appointment Data\",\r\n            info=\"Data containing appointment date, start time, and end time.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"status\",\r\n            display_name=\"Status\",\r\n            info='Acceptable values: \"ACCEPTED\", \"PENDING\", \"CANCELLED\", \"REJECTED\".',\r\n        ),\r\n        MessageTextInput(\r\n            name=\"description\",\r\n            display_name=\"Description\",\r\n            info=\"Description of the meeting.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Booking Data\", name=\"booking_data\", method=\"edit_booking\"),\r\n    ]\r\n\r\n    def edit_booking(self) -> Data:\r\n        api_key = self.api_key\r\n        booking_id = self.booking_id\r\n        title = self.title\r\n        appointment_data = self.appointment_data.data  # Access the actual data dictionary\r\n        status = self.status\r\n        description = self.description\r\n\r\n        appointment_date = appointment_data[\"appointment_date\"]\r\n        start_time_str = appointment_data[\"start_time\"]\r\n        end_time_str = appointment_data[\"end_time\"]\r\n\r\n        # Convert appointment_date, start_time and end_time to ISO 8601 format\r\n        date_format = \"%d/%m/%Y\"\r\n        time_format = \"%H:%M\"\r\n        iso_format = \"%Y-%m-%dT%H:%M:%S.000Z\"\r\n\r\n        try:\r\n            start_datetime = datetime.strptime(f\"{appointment_date} {start_time_str}\", f\"{date_format} {time_format}\")\r\n            end_datetime = datetime.strptime(f\"{appointment_date} {end_time_str}\", f\"{date_format} {time_format}\")\r\n\r\n            start_time_iso = start_datetime.strftime(iso_format)\r\n            end_time_iso = end_datetime.strftime(iso_format)\r\n        except ValueError as e:\r\n            return Data(data={\"error\": f\"Date format error: {str(e)}\"})\r\n\r\n        url = f\"https://api.cal.com/v1/bookings/{booking_id}?apiKey={api_key}\"\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n        data = {}\r\n        if title:\r\n            data[\"title\"] = title\r\n        if start_time_iso:\r\n            data[\"startTime\"] = start_time_iso\r\n        if end_time_iso:\r\n            data[\"endTime\"] = end_time_iso\r\n        if status:\r\n            data[\"status\"] = status\r\n        if description:\r\n            data[\"description\"] = description\r\n\r\n        response = requests.patch(url, headers=headers, data=json.dumps(data))\r\n\r\n        if response.status_code == 200:\r\n            booking = response.json()\r\n            return Data(data={\"booking\": booking})\r\n        else:\r\n            return Data(data={\"error\": f\"Failed to edit booking: {response.status_code} {response.text}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Description of the meeting.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "status": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "status",
                "display_name": "Status",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Acceptable values: \"ACCEPTED\", \"PENDING\", \"CANCELLED\", \"REJECTED\".",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "title": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "title",
                "display_name": "Title",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Booking event title.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Component to edit an existing booking in Cal.com API.",
            "icon": "book-up-2",
            "base_classes": [
              "Data"
            ],
            "display_name": "Edit Booking",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "booking_data",
                "display_name": "Booking Data",
                "method": "edit_booking",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "booking_id",
              "title",
              "appointment_data",
              "status",
              "description"
            ],
            "beta": false,
            "edited": true
          },
          "id": "EditBookingComponent-2Mi8s"
        },
        "selected": false,
        "width": 384,
        "height": 718
      },
      {
        "id": "FindNextBookingComponent-lxxX9",
        "type": "genericNode",
        "position": {
          "x": 3213.66940631115,
          "y": 220.23063505373966
        },
        "data": {
          "type": "FindNextBookingComponent",
          "node": {
            "template": {
              "_type": "Component",
              "bookings_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "bookings_data",
                "display_name": "Bookings Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Data containing all bookings.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "client_email": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "client_email",
                "display_name": "Client Email",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Email of the client to find the next booking.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput, DataInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nfrom typing import Dict, Any, List\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass FindNextBookingComponent(Component):\r\n    display_name = \"Find Next Booking\"\r\n    description = \"Find the next booking for a given client email.\"\r\n    icon = \"search\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"client_email\",\r\n            display_name=\"Client Email\",\r\n            info=\"Email of the client to find the next booking.\",\r\n        ),\r\n        DataInput(\r\n            name=\"bookings_data\",\r\n            display_name=\"Bookings Data\",\r\n            info=\"Data containing all bookings.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Booking Data\", name=\"booking_data\", method=\"process_data\"),\r\n    ]\r\n\r\n    def process_data(self) -> Data:\r\n        client_email = self.client_email\r\n        bookings_data = self.bookings_data.data  # Access the actual data\r\n\r\n        # Ensure bookings_data is properly formatted\r\n        if isinstance(bookings_data, dict) and \"bookings\" in bookings_data:\r\n            bookings = bookings_data.get(\"bookings\", [])\r\n            \r\n            # Find the next booking for the given client email\r\n            for booking in bookings:\r\n                for attendee in booking.get(\"attendees\", []):\r\n                    if attendee.get(\"email\") == client_email:\r\n                        return Data(data={\"result\": booking})\r\n        \r\n        self.status = \"Booking not found\"\r\n        return Data(data={\"result\": \"Booking not found\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Find the next booking for a given client email.",
            "icon": "search",
            "base_classes": [
              "Data"
            ],
            "display_name": "Filter Bookings",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "booking_data",
                "display_name": "Booking Data",
                "method": "process_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "client_email",
              "bookings_data"
            ],
            "beta": false,
            "edited": true
          },
          "id": "FindNextBookingComponent-lxxX9"
        },
        "selected": false,
        "width": 384,
        "height": 346
      },
      {
        "id": "ParseData-acAm1",
        "type": "genericNode",
        "position": {
          "x": 2727.7227470052103,
          "y": -32.410966171775726
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{email}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-acAm1"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-CUpkq",
        "type": "genericNode",
        "position": {
          "x": 3819.807524973283,
          "y": 109.1302349745547
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{result[id]}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-CUpkq"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-VSc7n",
        "type": "genericNode",
        "position": {
          "x": 3813.6003684999732,
          "y": 567.5689684311205
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{result[startTime]}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-VSc7n"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "OllamaModel-JqVWh",
        "type": "genericNode",
        "position": {
          "x": 4903.988037363728,
          "y": 148.00466359925122
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "mirostat": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "model_name": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "llava-llama3:latest",
                  "llama3.1:latest",
                  "mistral-nemo:latest",
                  "llama3.1:70b-instruct-q2_K",
                  "qwen2:latest",
                  "deepseek-coder-v2:latest",
                  "mixtral:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mistral-nemo:latest",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "base_url",
              "model_name",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-JqVWh"
        },
        "selected": false,
        "width": 384,
        "height": 680
      },
      {
        "id": "Prompt-tq6HS",
        "type": "genericNode",
        "position": {
          "x": 4405.7835805407985,
          "y": 201.57576074320423
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Data: {date}\n--------\nConverta a data de acordo com o histórico de mensagens acima para o formato DD/MM/AAAA às HH:MM e forneça uma resposta com os dados abaixo atualizados no seguinte padrão:\n\nExemplo de Resposta:\nOi! Vi que você tem um agendamento na data: [data e hora], gostaria de confirmar o agendamento? Por favor me forneça o dia e a hora caso queira alterar.",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "date": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "date",
                "display_name": "date",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "date"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-tq6HS"
        },
        "selected": false,
        "width": 384,
        "height": 412
      },
      {
        "id": "ChatOutput-ieF9q",
        "type": "genericNode",
        "position": {
          "x": 5496.546319420691,
          "y": 468.74784541940926
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-ieF9q"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ConditionalRouter-3b1Xk",
        "type": "genericNode",
        "position": {
          "x": 6475.0762438460815,
          "y": 4298.876948756293
        },
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"Conditional Router\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"equal\"\n    name = \"ConditionalRouter\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Input Text\",\n            info=\"The primary text input for the operation.\",\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True Route\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False Route\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, case_sensitive: bool) -> bool:\n        if not case_sensitive:\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        elif operator == \"not equals\":\n            return input_text != match_text\n        elif operator == \"contains\":\n            return match_text in input_text\n        elif operator == \"starts with\":\n            return input_text.startswith(match_text)\n        elif operator == \"ends with\":\n            return input_text.endswith(match_text)\n        return False\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\n        if result:\n            self.status = self.message\n            return self.message\n        else:\n            self.stop(\"true_result\")\n            return None  # type: ignore\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\n        if not result:\n            self.status = self.message\n            return self.message\n        else:\n            self.stop(\"false_result\")\n            return None  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Próximos Passos",
                "name": "match_text",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "equals",
                "name": "operator",
                "display_name": "Operator",
                "advanced": true,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Message"
            ],
            "display_name": "Conditional Router",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "display_name": "True Route",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "display_name": "False Route",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConditionalRouter-3b1Xk"
        },
        "selected": false,
        "width": 384,
        "height": 542
      },
      {
        "id": "ChatOutput-3fPb6",
        "type": "genericNode",
        "position": {
          "x": 7211.920745842426,
          "y": 5160.42977157462
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-3fPb6"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ScheduleCheckComponent-Zw3hU",
        "type": "genericNode",
        "position": {
          "x": 5954.257549098679,
          "y": 4485.229164161787
        },
        "data": {
          "type": "ScheduleCheckComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.schema.message import Message\r\nfrom datetime import datetime, timedelta\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass ScheduleCheckComponent(Component):\r\n    display_name = \"Schedule Check Component\"\r\n    description = \"Verifica se um dia cai em um final de semana ou feriado e pergunta o horário conveniente.\"\r\n    icon = \"calendar\"\r\n\r\n    inputs = [\r\n        MessageTextInput(name=\"data\", display_name=\"Data (DD/MM/AAAA)\", info=\"Data para verificação.\")\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Resposta\", name=\"response\", method=\"check_day\")\r\n    ]\r\n\r\n    # Lista de feriados fixos no Brasil como um atributo de classe\r\n    feriados_fixos = [\r\n        \"01/01\",  # Confraternização Universal\r\n        \"21/04\",  # Tiradentes\r\n        \"01/05\",  # Dia do Trabalho\r\n        \"07/09\",  # Independência do Brasil\r\n        \"12/10\",  # Nossa Senhora Aparecida\r\n        \"02/11\",  # Finados\r\n        \"15/11\",  # Proclamação da República\r\n        \"25/12\"   # Natal\r\n    ]\r\n\r\n    def check_day(self) -> Message:\r\n        data_input = self.data\r\n        \r\n        try:\r\n            # Converte a string no formato DD/MM/AAAA para um objeto datetime\r\n            data = datetime.strptime(data_input, \"%d/%m/%Y\")\r\n        except ValueError:\r\n            return \"Formato de data inválido. Por favor, use DD/MM/AAAA.\"\r\n        \r\n        data_str = data.strftime(\"%d/%m\")\r\n        \r\n        if data.weekday() >= 5:\r\n            return Message(text=f\"O dia {data_str} cai em um final de semana. Pode me informar um horário em um dia útil?\")\r\n        elif data_str in self.feriados_fixos:\r\n            return Message(text=f\"O dia {data_str} é um feriado. Pode me informar um horário em um dia útil?\")\r\n        else:\r\n            return Message(text=f\"Próximos Passos\")\r\n\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data (DD/MM/AAAA)",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Data para verificação.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Verifica se um dia cai em um final de semana ou feriado e pergunta o horário conveniente.",
            "icon": "calendar",
            "base_classes": [
              "Message"
            ],
            "display_name": "Check holidays",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "display_name": "Resposta",
                "method": "check_day",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ScheduleCheckComponent-Zw3hU"
        },
        "selected": false,
        "width": 384,
        "height": 326
      },
      {
        "id": "ParseData-vQpJy",
        "type": "genericNode",
        "position": {
          "x": 5497.898083132734,
          "y": 4469.59912885391
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{appointment_date}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-vQpJy"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ConditionalRouter-UTSSp",
        "type": "genericNode",
        "position": {
          "x": 4466.832021161473,
          "y": 4344.423904237868
        },
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"Conditional Router\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"equal\"\n    name = \"ConditionalRouter\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Input Text\",\n            info=\"The primary text input for the operation.\",\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n            advanced=True,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True Route\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False Route\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, case_sensitive: bool) -> bool:\n        if not case_sensitive:\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        elif operator == \"not equals\":\n            return input_text != match_text\n        elif operator == \"contains\":\n            return match_text in input_text\n        elif operator == \"starts with\":\n            return input_text.startswith(match_text)\n        elif operator == \"ends with\":\n            return input_text.endswith(match_text)\n        return False\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\n        if result:\n            self.status = self.message\n            return self.message\n        else:\n            self.stop(\"true_result\")\n            return None  # type: ignore\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(self.input_text, self.match_text, self.operator, self.case_sensitive)\n        if not result:\n            self.status = self.message\n            return self.message\n        else:\n            self.stop(\"false_result\")\n            return None  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ok. Você pode me informar sua preferência de dia e horário, por favor?",
                "name": "match_text",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "message",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "contains",
                "name": "operator",
                "display_name": "Operator",
                "advanced": true,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Message"
            ],
            "display_name": "Conditional Router",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "display_name": "True Route",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "display_name": "False Route",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConditionalRouter-UTSSp"
        },
        "selected": false,
        "width": 384,
        "height": 542
      },
      {
        "id": "ChatOutput-xBOiG",
        "type": "genericNode",
        "position": {
          "x": 5011.194258204352,
          "y": 5011.740289050433
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-xBOiG"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "PostgresUpdate-jBdCi",
        "type": "genericNode",
        "position": {
          "x": 6084.627669215423,
          "y": 33.27544689912747
        },
        "data": {
          "type": "PostgresUpdate",
          "node": {
            "template": {
              "_type": "Component",
              "booking_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "booking_id",
                "display_name": "Booking ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresUpdateComponent(Component):\r\n    display_name = \"Postgres Update\"\r\n    description = \"Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresUpdate\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"booking_id\",\r\n            display_name=\"Booking ID\",\r\n        ),\r\n        StrInput(\r\n            name=\"estado_atendimento\",\r\n            display_name=\"Estado do Atendimento\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"upsert_data\"),\r\n    ]\r\n\r\n    def create_table_if_not_exists(self, cursor):\r\n        create_table_query = \"\"\"\r\n        CREATE TABLE IF NOT EXISTS atendimentos (\r\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\r\n            estado_atendimento VARCHAR(255) NOT NULL,\r\n            nome VARCHAR(255),\r\n            whatsapp VARCHAR(255),\r\n            email VARCHAR(255),\r\n            booking_id VARCHAR(255),\r\n            finalizar_atendimento VARCHAR(255)\r\n        );\r\n        \"\"\"\r\n        cursor.execute(create_table_query)\r\n\r\n    def upsert_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n        booking_id = self.booking_id\r\n        estado_atendimento = self.estado_atendimento\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            self.create_table_if_not_exists(cursor)\r\n            query = \"\"\"\r\n            INSERT INTO atendimentos (session_id, booking_id, estado_atendimento) \r\n            VALUES (%s, %s, %s)\r\n            ON CONFLICT (session_id) DO UPDATE \r\n            SET booking_id = EXCLUDED.booking_id,\r\n                estado_atendimento = EXCLUDED.estado_atendimento;\r\n            \"\"\"\r\n            cursor.execute(query, (session_id, booking_id, estado_atendimento))\r\n            conn.commit()\r\n            cursor.close()\r\n            conn.close()\r\n            return Data(data={\"result\": \"Upsert successful\"})\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Upsert failed: {str(e)}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "estado_atendimento": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Finalização do Atendimento",
                "name": "estado_atendimento",
                "display_name": "Estado do Atendimento",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Inserts or updates a row in a PostgreSQL database with session_id and estado_atendimento.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Update Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "upsert_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "booking_id",
              "estado_atendimento",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresUpdate-jBdCi"
        },
        "selected": false,
        "width": 384,
        "height": 1042
      },
      {
        "id": "ParseData-56yZJ",
        "type": "genericNode",
        "position": {
          "x": 1388.4379768601561,
          "y": 5690.922337263342
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{session_id}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-56yZJ"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-P8agU",
        "type": "genericNode",
        "position": {
          "x": 1385.5585771877718,
          "y": 6214.179603091691
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-P8agU"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "Prompt-YyJ2n",
        "type": "genericNode",
        "position": {
          "x": 3386.994140900687,
          "y": 5927.459138650867
        },
        "data": {
          "type": "Prompt",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Memória do Chat: {chat_memory}\nÚltima Mensagem: {last_message}\nData Atual: {date_now}\n\n-----\nCom base na última mensagem, memória do chat e na data atual, determine se o cliente deseja mudar o horário do agendamento, cancelar o agendamento ou confirmar o agendamento, leve com maior prioridade a última mensagem do que a memória do chat, mas leve em consideração a memória do chat para entender o contexto da conversa. Responda com uma das cinco opções abaixo, completando as variáveis conforme necessário:\n\n1. Se o cliente quiser mudar o agendamento mas não citar o um dia e um horário, de acordo com a última mensagem relacionada a memória do chat, responda com:\nOk, pode me informar a data e hora de interesse?\n\n2. Se o cliente tiver conversando algo em geral, não relacionado ao agendamento dele, de acordo com a última mensagem relacionada à memória do chat responda com:\nTudo ok, gostaria de confirmar seu agendamento?\n\n3. Se o cliente tiver uma dúvida sobre o agendamento dele, de acordo com a última mensagem relacionada à memória do chat responda com:\nTudo ok, gostaria de confirmar seu agendamento?\n\n4. Se o cliente quiser mudar o horário do agendamento, de acordo com a última mensagem relacionada à memória do chat responda com:\nMudar horário do agendamento:\nData do agendamento: [nova data de agendamento]\nHorário do agendamento: [novo horário de agendamento]\n\n5. Se o cliente quiser confirmar o agendamento, de acordo com a última mensagem relacionada à memória do chat responda com:\nACCEPTED\n\n6. Se o cliente quiser cancelar o agendamento, de acordo com a última mensagem relacionada à memória do chat responda com:\nCANCELLED\n\n---\nConsidere apenas a última mensagem do cliente para determinar a ação correta:\n- Se a última mensagem do cliente mencionar \"mudar\", \"alterar\", \"trocar\" ou outras palavras relacionadas a mudança de horário, considere que ele deseja mudar o horário do agendamento.\n- Se a última mensagem do cliente mencionar \"confirmar\", \"ok\", \"confirmado\", \"sim\" ou outras palavras relacionadas a confirmação, considere que ele deseja confirmar o agendamento.\n- Se a última mensagem do cliente mencionar \"cancelar\", \"desmarcar\", \"cancelado\" ou outras palavras relacionadas a cancelamento, considere que ele deseja cancelar o agendamento.\n\nExemplo de resposta para interesse em mudar agendamento que não foi citado dia e horário na última mensagem:\nOk, pode me informar a data e hora de interesse?\n\nExemplo de resposta para conversas gerais:\nTudo ok, gostaria de confirmar seu agendamento?\n\nExemplo de resposta para dúvida sobre o agendamento:\nTudo ok, gostaria de confirmar seu agendamento?\n\nExemplo de resposta para mudar horário:\nMudar horário do agendamento:\nData do agendamento: 2024-08-10\nHorário do agendamento: 19:00\n\nExemplo de resposta para confirmar agendamento:\nACCEPTED\n\nExemplo de resposta para cancelar agendamento:\nCANCELLED\n\n\nResposta:\nCite apenas a resposta, não cite o motivo da escolha.",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "chat_memory": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "chat_memory",
                "display_name": "chat_memory",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "date_now": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "date_now",
                "display_name": "date_now",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "last_message": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "last_message",
                "display_name": "last_message",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Text"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "custom_fields": {
              "template": [
                "chat_memory",
                "last_message",
                "date_now"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": false,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "template"
            ],
            "beta": false,
            "error": null,
            "edited": false
          },
          "id": "Prompt-YyJ2n"
        },
        "selected": false,
        "width": 384,
        "height": 584
      },
      {
        "id": "DateTimeComponent-ILZqG",
        "type": "genericNode",
        "position": {
          "x": 2103.665821285304,
          "y": 6185.4401586517615
        },
        "data": {
          "type": "DateTimeComponent",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass DateTimeComponent(Component):\r\n    display_name = \"Date Time Component\"\r\n    description = \"Gets the current date and time for São Paulo from an API and passes a message to the output.\"\r\n    icon = \"clock\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"input_message\",\r\n            display_name=\"Input Message\",\r\n            info=\"Message to be passed to the output.\",\r\n        )\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Date Time Output\", name=\"datetime_output\", method=\"get_datetime\"),\r\n        Output(display_name=\"Message Output\", name=\"message_output\", method=\"get_message\"),\r\n    ]\r\n\r\n    def get_datetime(self) -> Data:\r\n        response = requests.get('http://worldtimeapi.org/api/timezone/America/Sao_Paulo')\r\n        if response.status_code == 200:\r\n            data = response.json()\r\n            return Data(data=data)\r\n        else:\r\n            return None\r\n\r\n    def get_message(self) -> Message:\r\n        input_message = self.input_message\r\n        return Message(text=input_message)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_message",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed to the output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Gets the current date and time for São Paulo from an API and passes a message to the output.",
            "icon": "clock",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Date Time",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "datetime_output",
                "display_name": "Date Time Output",
                "method": "get_datetime",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message_output",
                "display_name": "Message Output",
                "method": "get_message",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "DateTimeComponent-ILZqG"
        },
        "selected": false,
        "width": 384,
        "height": 398
      },
      {
        "id": "ParseData-AfjJT",
        "type": "genericNode",
        "position": {
          "x": 2657.3656547916453,
          "y": 6154.881330521881
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{datetime}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-AfjJT"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "Memory-sKNjq",
        "type": "genericNode",
        "position": {
          "x": 2904.464880859152,
          "y": 6743.767497217546
        },
        "data": {
          "type": "Memory",
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "memory",
                "display_name": "External Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMessageHistory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import get_messages, LCBuiltinChatMemory\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import BaseChatMemory\nfrom langchain.memory import ConversationBufferMemory\n\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"BaseChatMessageHistory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Messages (Data)\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Messages (Text)\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"Memory\", name=\"lc_memory\", method=\"build_lc_memory\"),\n    ]\n\n    def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = self.memory.messages\n            if order == \"ASC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = get_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    def build_lc_memory(self) -> BaseChatMemory:\n        if self.memory:\n            chat_memory = self.memory\n        else:\n            chat_memory = LCBuiltinChatMemory(flow_id=self.graph.flow_id, session_id=self.session_id)\n        return ConversationBufferMemory(chat_memory=chat_memory)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "n_messages": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 100,
                "name": "n_messages",
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "order": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ascending",
                "name": "order",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine and User",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{sender_name}: {text}",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
            "icon": "message-square-more",
            "base_classes": [
              "BaseChatMemory",
              "Data",
              "Message"
            ],
            "display_name": "Chat Memory",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "messages",
                "display_name": "Messages (Data)",
                "method": "retrieve_messages",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "messages_text",
                "display_name": "Messages (Text)",
                "method": "retrieve_messages_as_text",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "BaseChatMemory"
                ],
                "selected": "BaseChatMemory",
                "name": "lc_memory",
                "display_name": "Memory",
                "method": "build_lc_memory",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "Memory-sKNjq"
        },
        "selected": false,
        "width": 384,
        "height": 377
      },
      {
        "id": "OllamaModel-jumnw",
        "type": "genericNode",
        "position": {
          "x": 3908.789927552003,
          "y": 5776.9667353078385
        },
        "data": {
          "type": "OllamaModel",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Base URL",
                "advanced": false,
                "dynamic": false,
                "info": "Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nimport httpx\nfrom langchain_community.chat_models import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, StrInput\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name == \"model_name\":\n            base_url_dict = build_config.get(\"base_url\", {})\n            base_url_load_from_db = base_url_dict.get(\"load_from_db\", False)\n            base_url_value = base_url_dict.get(\"value\")\n            if base_url_load_from_db:\n                base_url_value = self.variables(base_url_value)\n            elif not base_url_value:\n                base_url_value = \"http://localhost:11434\"\n            build_config[\"model_name\"][\"options\"] = self.get_model(base_url_value + \"/api/tags\")\n\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    def get_model(self, url: str) -> list[str]:\n        try:\n            with httpx.Client() as client:\n                response = client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n                model_names = [model[\"name\"] for model in data.get(\"models\", [])]\n                return model_names\n        except Exception as e:\n            raise ValueError(\"Could not retrieve models. Please, make sure Ollama is running.\") from e\n\n    inputs = LCModelComponent._base_inputs + [\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API. Defaults to 'http://localhost:11434' if not specified.\",\n            value=\"http://localhost:11434\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            value=\"llama3\",\n            info=\"Refer to https://ollama.ai/library for more models.\",\n            refresh_button=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.2,\n            info=\"Controls the creativity of model responses.\",\n        ),\n        StrInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"Specify the format of the output (e.g., json).\",\n            advanced=True,\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Metadata to add to the run trace.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"tfs_z\",\n            display_name=\"TFS Z\",\n            info=\"Tail free sampling value. (Default: 1)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"Timeout for the request stream.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Limits token selection to top K. (Default: 40)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"Works together with top-k. (Default: 0.9)\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            info=\"Whether to print out response text.\",\n        ),\n        StrInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"system\",\n            display_name=\"System\",\n            info=\"System to use for generating text.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"Template to use for generating text.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)  # type: ignore\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"template\": self.template,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not initialize Ollama LLM.\") from e\n\n        return output  # type: ignore\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "format": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "format",
                "display_name": "Format",
                "advanced": true,
                "dynamic": false,
                "info": "Specify the format of the output (e.g., json).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "metadata": {
                "trace_as_input": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": {},
                "name": "metadata",
                "display_name": "Metadata",
                "advanced": true,
                "dynamic": false,
                "info": "Metadata to add to the run trace.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "mirostat": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Disabled",
                  "Mirostat",
                  "Mirostat 2.0"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Disabled",
                "name": "mirostat",
                "display_name": "Mirostat",
                "advanced": true,
                "dynamic": false,
                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "mirostat_eta": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_eta",
                "display_name": "Mirostat Eta",
                "advanced": true,
                "dynamic": false,
                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "mirostat_tau": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "mirostat_tau",
                "display_name": "Mirostat Tau",
                "advanced": true,
                "dynamic": false,
                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "model_name": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "llava-llama3:latest",
                  "llama3.1:latest",
                  "mistral-nemo:latest",
                  "llama3.1:70b-instruct-q2_K",
                  "qwen2:latest",
                  "deepseek-coder-v2:latest",
                  "mixtral:latest"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mistral-nemo:latest",
                "name": "model_name",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "Refer to https://ollama.ai/library for more models.",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "num_ctx": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_ctx",
                "display_name": "Context Window Size",
                "advanced": true,
                "dynamic": false,
                "info": "Size of the context window for generating tokens. (Default: 2048)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_gpu": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_gpu",
                "display_name": "Number of GPUs",
                "advanced": true,
                "dynamic": false,
                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "num_thread": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "num_thread",
                "display_name": "Number of Threads",
                "advanced": true,
                "dynamic": false,
                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_last_n": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_last_n",
                "display_name": "Repeat Last N",
                "advanced": true,
                "dynamic": false,
                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "repeat_penalty": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "repeat_penalty",
                "display_name": "Repeat Penalty",
                "advanced": true,
                "dynamic": false,
                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "stop_tokens": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "stop_tokens",
                "display_name": "Stop Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "stream": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "stream",
                "display_name": "Stream",
                "advanced": true,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system",
                "display_name": "System",
                "advanced": true,
                "dynamic": false,
                "info": "System to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "system_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "system_message",
                "display_name": "System Message",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tags": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tags",
                "display_name": "Tags",
                "advanced": true,
                "dynamic": false,
                "info": "Comma-separated list of tags to add to the run trace.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "0",
                "name": "temperature",
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "Controls the creativity of model responses.",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "template": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "template",
                "display_name": "Template",
                "advanced": true,
                "dynamic": false,
                "info": "Template to use for generating text.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "tfs_z": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "tfs_z",
                "display_name": "TFS Z",
                "advanced": true,
                "dynamic": false,
                "info": "Tail free sampling value. (Default: 1)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "timeout": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "timeout",
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "Timeout for the request stream.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_k": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_k",
                "display_name": "Top K",
                "advanced": true,
                "dynamic": false,
                "info": "Limits token selection to top K. (Default: 40)",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "top_p": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "top_p",
                "display_name": "Top P",
                "advanced": true,
                "dynamic": false,
                "info": "Works together with top-k. (Default: 0.9)",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              },
              "verbose": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "verbose",
                "display_name": "Verbose",
                "advanced": false,
                "dynamic": false,
                "info": "Whether to print out response text.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Generate text using Ollama Local LLMs.",
            "icon": "Ollama",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "Ollama",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Text",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "base_url",
              "model_name",
              "temperature",
              "format",
              "metadata",
              "mirostat",
              "mirostat_eta",
              "mirostat_tau",
              "num_ctx",
              "num_gpu",
              "num_thread",
              "repeat_last_n",
              "repeat_penalty",
              "tfs_z",
              "timeout",
              "top_k",
              "top_p",
              "verbose",
              "tags",
              "stop_tokens",
              "system",
              "template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaModel-jumnw"
        },
        "selected": false,
        "width": 384,
        "height": 680
      },
      {
        "id": "ChatOutput-YY7SM",
        "type": "genericNode",
        "position": {
          "x": 6648.254535132388,
          "y": 6146.606329737659
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Tudo Certo! Seu horário foi alterado!",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-YY7SM"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ConditionalRouter-pG6AT",
        "type": "genericNode",
        "position": {
          "x": 4470.767680066808,
          "y": 6001.766729758449
        },
        "data": {
          "type": "ConditionalRouter",
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "case_sensitive",
                "display_name": "Case Sensitive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import BoolInput, MessageInput, Output\r\nfrom langflow.schema.message import Message\r\nfrom langflow.schema.data import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass ConditionalRouterComponent(Component):\r\n    display_name = \"Conditional Router\"\r\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\r\n    icon = \"equal\"\r\n    name = \"ConditionalRouter\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"input_text\",\r\n            display_name=\"Input Text\",\r\n            info=\"The primary text input for the operation.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"case_sensitive\",\r\n            display_name=\"Case Sensitive\",\r\n            info=\"If true, the comparison will be case sensitive.\",\r\n            value=False,\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Route Result\", name=\"result\", method=\"route_message\"),\r\n        Output(display_name=\"Hello\", name=\"hello\", method=\"hello_method\"),\r\n        Output(display_name=\"Confirmation\", name=\"confirmation\", method=\"confirmation_method\"),\r\n    ]\r\n\r\n    # Definindo os textos de correspondência embutidos\r\n    match_texts = {\r\n        \"accepted\": \"ACCEPTED\",\r\n        \"cancelled\": \"CANCELLED\"\r\n    }\r\n\r\n    confirmation_texts = [\r\n        \"Tudo ok, gostaria de confirmar seu agendamento?\",\r\n        \"Ok, pode me informar a data e hora de interesse?\"\r\n    ]\r\n\r\n    def evaluate_condition(self, input_text: str, case_sensitive: bool) -> str:\r\n        match_texts = self.match_texts\r\n\r\n        if not case_sensitive:\r\n            input_text = input_text.lower()\r\n            match_texts = {k: v.lower() for k, v in match_texts.items()}\r\n\r\n        for key, value in match_texts.items():\r\n            if value in input_text:\r\n                return key\r\n        return \"\"\r\n\r\n    def route_message(self) -> Data:\r\n        if not hasattr(self, 'input_text') or self.input_text is None or self.input_text.text is None:\r\n            self.stop(\"result\")\r\n            return None\r\n        \r\n        match_key = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if match_key:\r\n            route_text = match_key.capitalize()\r\n            return Data(data={\"route\": route_text})\r\n        else:\r\n            self.stop(\"result\")\r\n            return None\r\n\r\n    def hello_method(self) -> Message:\r\n        if not hasattr(self, 'input_text') or self.input_text is None or self.input_text.text is None:\r\n            self.stop(\"hello\")\r\n            return None\r\n        \r\n        match_key = self.evaluate_condition(self.input_text.text, self.case_sensitive)\r\n        if match_key or any(text in self.input_text.text for text in self.confirmation_texts):\r\n            self.stop(\"hello\")\r\n            return None\r\n        else:\r\n            return Message(text=self.input_text.text)\r\n\r\n    def confirmation_method(self) -> Message:\r\n        if not hasattr(self, 'input_text') or self.input_text is None or self.input_text.text is None:\r\n            self.stop(\"confirmation\")\r\n            return None\r\n        \r\n        input_text = self.input_text.text\r\n        confirmation_texts = self.confirmation_texts\r\n\r\n        if not self.case_sensitive:\r\n            input_text = input_text.lower()\r\n            confirmation_texts = [text.lower() for text in confirmation_texts]\r\n\r\n        if any(text in input_text for text in confirmation_texts):\r\n            return Message(text=self.input_text.text)\r\n        else:\r\n            self.stop(\"confirmation\")\r\n            return None\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_text": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_text",
                "display_name": "Input Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "equal",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Matches Regex",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Route Result",
                "method": "route_message",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "hello",
                "display_name": "Hello",
                "method": "hello_method",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "confirmation",
                "display_name": "Confirmation",
                "method": "confirmation_method",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_text",
              "case_sensitive"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ConditionalRouter-pG6AT"
        },
        "selected": false,
        "width": 384,
        "height": 415
      },
      {
        "id": "AppointmentDetailsComponent-ULLer",
        "type": "genericNode",
        "position": {
          "x": 5032.625928592311,
          "y": 5738.964589650896
        },
        "data": {
          "type": "AppointmentDetailsComponent",
          "node": {
            "template": {
              "_type": "Component",
              "appointment_message": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "appointment_message",
                "display_name": "Appointment Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message containing the appointment date and time.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport re\r\nfrom datetime import datetime, timedelta\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass AppointmentDetailsComponent(Component):\r\n    display_name = \"Appointment Details Extractor\"\r\n    description = \"Extracts appointment date and time and formats them into start and end time.\"\r\n    icon = \"calendar\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"appointment_message\",\r\n            display_name=\"Appointment Message\",\r\n            info=\"Message containing the appointment date and time.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Formatted Appointment Details\", name=\"formatted_appointment_details\", method=\"extract_and_format\"),\r\n    ]\r\n\r\n    def extract_and_format(self) -> Data:\r\n        appointment_message = self.appointment_message\r\n\r\n        # Splitting the message into lines for better processing\r\n        lines = appointment_message.split('\\n')\r\n\r\n        # Regex patterns\r\n        date_regex = r'Data do agendamento:\\s*(\\d{4}-\\d{2}-\\d{2})'\r\n        time_regex = r'Horário do agendamento:\\s*(\\d{2}:\\d{2})'\r\n\r\n        # Extracting the data\r\n        appointment_date = None\r\n        start_time_str = end_time_str = None\r\n\r\n        for line in lines:\r\n            date_match = re.search(date_regex, line)\r\n            time_match = re.search(time_regex, line)\r\n\r\n            if date_match:\r\n                appointment_date = date_match.group(1).strip()\r\n            elif time_match:\r\n                time_str = time_match.group(1).strip()\r\n                if appointment_date:\r\n                    start_time = datetime.strptime(f\"{appointment_date} {time_str}\", \"%Y-%m-%d %H:%M\")\r\n                    end_time = start_time + timedelta(minutes=30)\r\n                    start_time_str = start_time.strftime(\"%H:%M\")\r\n                    end_time_str = end_time.strftime(\"%H:%M\")\r\n\r\n        if appointment_date is None or start_time_str is None or end_time_str is None:\r\n            raise ValueError(\"Missing appointment date or time.\")\r\n\r\n        # Convert appointment_date to DD/MM/YYYY format\r\n        appointment_date_obj = datetime.strptime(appointment_date, \"%Y-%m-%d\")\r\n        formatted_appointment_date = appointment_date_obj.strftime(\"%d/%m/%Y\")\r\n\r\n        return Data(data={\r\n            \"appointment_date\": formatted_appointment_date,\r\n            \"start_time\": start_time_str,\r\n            \"end_time\": end_time_str\r\n        })\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Extracts appointment date and time and formats them into start and end time.",
            "icon": "calendar",
            "base_classes": [
              "Data"
            ],
            "display_name": "Date Formatter",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "formatted_appointment_details",
                "display_name": "Formatted Appointment Details",
                "method": "extract_and_format",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "appointment_message"
            ],
            "beta": false,
            "edited": true
          },
          "id": "AppointmentDetailsComponent-ULLer"
        },
        "selected": false,
        "width": 384,
        "height": 326
      },
      {
        "id": "ChatOutput-UkMfO",
        "type": "genericNode",
        "position": {
          "x": 7199.692043162815,
          "y": 7410.722238983084
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "Pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "Pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Just to receive information to pass to another node.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        DataInput(\n            name=\"Pass\",\n            display_name=\"Pass\",\n            info=\"Just to receive information to pass to another node.\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Ok! Tudo certo!",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "Pass",
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ChatOutput-UkMfO"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "PostgresQuery-qP9fO",
        "type": "genericNode",
        "position": {
          "x": 5064.901132228204,
          "y": 6143.19456929477
        },
        "data": {
          "type": "PostgresQuery",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresQueryComponent(Component):\r\n    display_name = \"Postgres Query\"\r\n    description = \"Fetches a row from a PostgreSQL database using session_id.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresQuery\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"fetch_data\"),\r\n    ]\r\n\r\n    def fetch_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            query = \"SELECT * FROM atendimentos WHERE session_id = %s;\"\r\n            cursor.execute(query, (session_id,))\r\n            row = cursor.fetchone()\r\n            cursor.close()\r\n            conn.close()\r\n\r\n            if row:\r\n                result = {\r\n                    \"session_id\": row[0],\r\n                    \"estado_atendimento\": row[1],\r\n                    \"nome\": row[2],\r\n                    \"whatsapp\": row[3],\r\n                    \"email\": row[4],\r\n                    \"booking_id\": row[5]\r\n                }\r\n                return Data(data={\"result\": result})\r\n            else:\r\n                return Data(data={\"result\": \"No data found for the given session_id\"})\r\n\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Query failed: {str(e)}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Fetches a row from a PostgreSQL database using session_id.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Postgres Query",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "fetch_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresQuery-qP9fO"
        },
        "selected": false,
        "width": 384,
        "height": 842
      },
      {
        "id": "ParseData-Fxu7O",
        "type": "genericNode",
        "position": {
          "x": 5561.045181763843,
          "y": 6544.112509957586
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{result[booking_id]}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-Fxu7O"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "ParseData-GGnNf",
        "type": "genericNode",
        "position": {
          "x": 5162.096847307597,
          "y": 7109.783008336077
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.helpers.data import data_to_text\r\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass ParseDataComponent(Component):\r\n    display_name = \"Parse Data\"\r\n    description = \"Convert Data into plain text following a specified template.\"\r\n    icon = \"braces\"\r\n    name = \"ParseData\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\r\n        MultilineInput(\r\n            name=\"template\",\r\n            display_name=\"Template\",\r\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\r\n            value=\"{text}\",\r\n        ),\r\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\r\n    ]\r\n\r\n    def parse_data(self) -> Message:\r\n        data = self.data if isinstance(self.data, list) else [self.data]\r\n        template = self.template\r\n\r\n        result_string = data_to_text(template, data, sep=self.sep)\r\n        result_string = result_string.upper()  # Convert to uppercase\r\n        self.status = result_string\r\n        return Message(text=result_string)\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{route}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": true
          },
          "id": "ParseData-GGnNf"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "EditBookingComponent-l2ITT",
        "type": "genericNode",
        "position": {
          "x": 6624.953091836043,
          "y": 6844.361510918345
        },
        "data": {
          "type": "EditBookingComponent",
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "api_key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your Cal.com API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "booking_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "booking_id",
                "display_name": "Booking ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "ID of the booking to edit.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport requests\r\nimport json\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass EditBookingComponent(Component):\r\n    display_name = \"Edit Booking Component\"\r\n    description = \"Component to edit an existing booking in Cal.com API.\"\r\n    icon = \"book-up-2\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"api_key\",\r\n            display_name=\"API Key\",\r\n            info=\"Your Cal.com API key.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"booking_id\",\r\n            display_name=\"Booking ID\",\r\n            info=\"ID of the booking to edit.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"title\",\r\n            display_name=\"Title\",\r\n            info=\"Booking event title.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"start_time\",\r\n            display_name=\"Start Time\",\r\n            info=\"Start time of the Event.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"end_time\",\r\n            display_name=\"End Time\",\r\n            info=\"End time of the Event.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"status\",\r\n            display_name=\"Status\",\r\n            info='Acceptable values: \"ACCEPTED\", \"PENDING\", \"CANCELLED\", \"REJECTED\".',\r\n        ),\r\n        MessageTextInput(\r\n            name=\"description\",\r\n            display_name=\"Description\",\r\n            info=\"Description of the meeting.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Booking Data\", name=\"booking_data\", method=\"edit_booking\"),\r\n    ]\r\n\r\n    def edit_booking(self) -> Data:\r\n        api_key = self.api_key\r\n        booking_id = self.booking_id\r\n        title = self.title\r\n        start_time = self.start_time\r\n        end_time = self.end_time\r\n        status = self.status\r\n        description = self.description\r\n\r\n        url = f\"https://api.cal.com/v1/bookings/{booking_id}?apiKey={api_key}\"\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n        data = {}\r\n        if title:\r\n            data[\"title\"] = title\r\n        if start_time:\r\n            data[\"startTime\"] = start_time\r\n        if end_time:\r\n            data[\"endTime\"] = end_time\r\n        if status:\r\n            data[\"status\"] = status\r\n        if description:\r\n            data[\"description\"] = description\r\n\r\n        response = requests.patch(url, headers=headers, data=json.dumps(data))\r\n\r\n        if response.status_code == 200:\r\n            booking = response.json()\r\n            return Data(data={\"booking\": booking})\r\n        else:\r\n            return Data(data={\"error\": f\"Failed to edit booking: {response.status_code} {response.text}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "description": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "description",
                "display_name": "Description",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Description of the meeting.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "end_time": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "end_time",
                "display_name": "End Time",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "End time of the Event.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "start_time": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "start_time",
                "display_name": "Start Time",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Start time of the Event.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "status": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "status",
                "display_name": "Status",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Acceptable values: \"ACCEPTED\", \"PENDING\", \"CANCELLED\", \"REJECTED\".",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "title": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "title",
                "display_name": "Title",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Booking event title.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Component to edit an existing booking in Cal.com API.",
            "icon": "book-up-2",
            "base_classes": [
              "Data"
            ],
            "display_name": "Edit Booking",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "booking_data",
                "display_name": "Booking Data",
                "method": "edit_booking",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "api_key",
              "booking_id",
              "title",
              "start_time",
              "end_time",
              "status",
              "description"
            ],
            "beta": false,
            "edited": true
          },
          "id": "EditBookingComponent-l2ITT"
        },
        "selected": false,
        "width": 384,
        "height": 842
      },
      {
        "id": "PostgresQuery-t6tEW",
        "type": "genericNode",
        "position": {
          "x": 5663.013455648942,
          "y": 7069.032890560373
        },
        "data": {
          "type": "PostgresQuery",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresQueryComponent(Component):\r\n    display_name = \"Postgres Query\"\r\n    description = \"Fetches a row from a PostgreSQL database using session_id.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresQuery\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"fetch_data\"),\r\n    ]\r\n\r\n    def fetch_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            query = \"SELECT * FROM atendimentos WHERE session_id = %s;\"\r\n            cursor.execute(query, (session_id,))\r\n            row = cursor.fetchone()\r\n            cursor.close()\r\n            conn.close()\r\n\r\n            if row:\r\n                result = {\r\n                    \"session_id\": row[0],\r\n                    \"estado_atendimento\": row[1],\r\n                    \"nome\": row[2],\r\n                    \"whatsapp\": row[3],\r\n                    \"email\": row[4],\r\n                    \"booking_id\": row[5]\r\n                }\r\n                return Data(data={\"result\": result})\r\n            else:\r\n                return Data(data={\"result\": \"No data found for the given session_id\"})\r\n\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Query failed: {str(e)}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Fetches a row from a PostgreSQL database using session_id.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Postgres Query",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "fetch_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresQuery-t6tEW"
        },
        "selected": false,
        "width": 384,
        "height": 842
      },
      {
        "id": "ParseData-XNcNQ",
        "type": "genericNode",
        "position": {
          "x": 6129.2681517028905,
          "y": 7558.856131453649
        },
        "data": {
          "type": "ParseData",
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "data",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "\n",
                "name": "sep",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{result[booking_id]}",
                "name": "template",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data into plain text following a specified template.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Parse Data",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ParseData-XNcNQ"
        },
        "selected": false,
        "width": 384,
        "height": 374
      },
      {
        "id": "PostgresDelete-AlCxk",
        "type": "genericNode",
        "position": {
          "x": 7851.311665386728,
          "y": 6787.508439326377
        },
        "data": {
          "type": "PostgresDelete",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresDeleteComponent(Component):\r\n    display_name = \"Postgres Delete\"\r\n    description = \"Deletes a row in a PostgreSQL database with the given session_id.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresDelete\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"delete_data\"),\r\n    ]\r\n\r\n    def create_table_if_not_exists(self, cursor):\r\n        create_table_query = \"\"\"\r\n        CREATE TABLE IF NOT EXISTS atendimentos (\r\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\r\n            estado_atendimento VARCHAR(255) NOT NULL,\r\n            nome VARCHAR(255),\r\n            whatsapp VARCHAR(255),\r\n            email VARCHAR(255),\r\n            booking_id VARCHAR(255),\r\n            PRIMARY KEY (session_id)\r\n        );\r\n        \"\"\"\r\n        cursor.execute(create_table_query)\r\n\r\n    def delete_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            self.create_table_if_not_exists(cursor)\r\n            query = \"\"\"\r\n            DELETE FROM atendimentos WHERE session_id = %s;\r\n            \"\"\"\r\n            cursor.execute(query, (session_id,))\r\n            conn.commit()\r\n            cursor.close()\r\n            conn.close()\r\n            return Data(data={\"result\": \"Delete successful\"})\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Delete failed: {str(e)}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Deletes a row in a PostgreSQL database with the given session_id.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Update Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "delete_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresDelete-AlCxk"
        },
        "selected": false,
        "width": 384,
        "height": 842
      },
      {
        "id": "PostgresDelete-17ckO",
        "type": "genericNode",
        "position": {
          "x": 7180.822055176434,
          "y": 5762.3322232467635
        },
        "data": {
          "type": "PostgresDelete",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\r\nimport psycopg2\r\nfrom langflow.custom import Component\r\nfrom langflow.io import StrInput, IntInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n# Component Criado Por: Fabricando sua Ideia https://www.youtube.com/@fabricandosuaideiatutoriais\r\n\r\nclass PostgresDeleteComponent(Component):\r\n    display_name = \"Postgres Delete\"\r\n    description = \"Deletes a row in a PostgreSQL database with the given session_id.\"\r\n    icon = \"Database\"\r\n    name = \"PostgresDelete\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"pass\",\r\n            display_name=\"Pass\",\r\n        ),\r\n        StrInput(\r\n            name=\"supabase_host\",\r\n            display_name=\"Supabase Host\",\r\n            value=\"fasfafsddsbf.supabase.co\",\r\n        ),\r\n        IntInput(\r\n            name=\"supabase_port\",\r\n            display_name=\"Supabase Port\",\r\n            value=5432,\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_user\",\r\n            display_name=\"Postgres User\",\r\n            value=\"postgres\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_password\",\r\n            display_name=\"Postgres Password\",\r\n            value=\"password\",\r\n        ),\r\n        StrInput(\r\n            name=\"postgres_db\",\r\n            display_name=\"Postgres Database\",\r\n            value=\"mydatabase\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"session_id\",\r\n            display_name=\"ID de Sessão\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Result\", name=\"result\", method=\"delete_data\"),\r\n    ]\r\n\r\n    def create_table_if_not_exists(self, cursor):\r\n        create_table_query = \"\"\"\r\n        CREATE TABLE IF NOT EXISTS atendimentos (\r\n            session_id VARCHAR(255) NOT NULL PRIMARY KEY,\r\n            estado_atendimento VARCHAR(255) NOT NULL,\r\n            nome VARCHAR(255),\r\n            whatsapp VARCHAR(255),\r\n            email VARCHAR(255),\r\n            booking_id VARCHAR(255),\r\n            PRIMARY KEY (session_id)\r\n        );\r\n        \"\"\"\r\n        cursor.execute(create_table_query)\r\n\r\n    def delete_data(self, *args, **kwargs) -> Data:\r\n        supabase_host = self.supabase_host\r\n        supabase_port = self.supabase_port\r\n        postgres_user = self.postgres_user\r\n        postgres_password = self.postgres_password\r\n        postgres_db = self.postgres_db\r\n        session_id = self.session_id\r\n\r\n        try:\r\n            conn = psycopg2.connect(\r\n                host=supabase_host,\r\n                port=supabase_port,\r\n                user=postgres_user,\r\n                password=postgres_password,\r\n                dbname=postgres_db\r\n            )\r\n            cursor = conn.cursor()\r\n            self.create_table_if_not_exists(cursor)\r\n            query = \"\"\"\r\n            DELETE FROM atendimentos WHERE session_id = %s;\r\n            \"\"\"\r\n            cursor.execute(query, (session_id,))\r\n            conn.commit()\r\n            cursor.close()\r\n            conn.close()\r\n            return Data(data={\"result\": \"Delete successful\"})\r\n        except Exception as e:\r\n            return Data(data={\"result\": f\"Delete failed: {str(e)}\"})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "postgres_db": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "postgres",
                "name": "postgres_db",
                "display_name": "Postgres Database",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_password": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_password",
                "display_name": "Postgres Password",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "postgres_user": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "postgres_user",
                "display_name": "Postgres User",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "ID de Sessão",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "supabase_host": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "supabase_host",
                "display_name": "Supabase Host",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "supabase_port": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "6543",
                "name": "supabase_port",
                "display_name": "Supabase Port",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              }
            },
            "description": "Deletes a row in a PostgreSQL database with the given session_id.",
            "icon": "Database",
            "base_classes": [
              "Data"
            ],
            "display_name": "Update Postgres",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "result",
                "display_name": "Result",
                "method": "delete_data",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "supabase_host",
              "supabase_port",
              "postgres_user",
              "postgres_password",
              "postgres_db",
              "session_id"
            ],
            "beta": false,
            "edited": true
          },
          "id": "PostgresDelete-17ckO"
        },
        "selected": false,
        "width": 384,
        "height": 842
      },
      {
        "id": "OllamaEmbeddings-swqPQ",
        "type": "genericNode",
        "position": {
          "x": 2275.123308651177,
          "y": 3752.1431419118367
        },
        "data": {
          "type": "OllamaEmbeddings",
          "node": {
            "template": {
              "_type": "Component",
              "base_url": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "http://ollama:11434",
                "name": "base_url",
                "display_name": "Ollama Base URL",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_community.embeddings import OllamaEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import FloatInput, MessageTextInput, Output\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n    name = \"OllamaEmbeddings\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"model\",\n            display_name=\"Ollama Model\",\n            value=\"llama2\",\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"http://localhost:11434\",\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Model Temperature\",\n            value=0.1,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(\n                model=self.model,\n                base_url=self.base_url,\n                temperature=self.temperature,\n            )  # type: ignore\n        except Exception as e:\n            raise ValueError(\"Could not connect to Ollama API.\") from e\n        return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "model": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "mxbai-embed-large:latest",
                "name": "model",
                "display_name": "Ollama Model",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "temperature": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 0.1,
                "name": "temperature",
                "display_name": "Model Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "float",
                "_input_type": "FloatInput"
              }
            },
            "description": "Generate embeddings using Ollama models.",
            "icon": "Ollama",
            "base_classes": [
              "Embeddings"
            ],
            "display_name": "Ollama Embeddings",
            "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Embeddings"
                ],
                "selected": "Embeddings",
                "name": "embeddings",
                "display_name": "Embeddings",
                "method": "build_embeddings",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "model",
              "base_url",
              "temperature"
            ],
            "beta": false,
            "edited": false
          },
          "id": "OllamaEmbeddings-swqPQ"
        },
        "selected": false,
        "width": 384,
        "height": 392
      },
      {
        "id": "RetrievalQA-x31qb",
        "type": "genericNode",
        "position": {
          "x": 3637.270537455477,
          "y": 3562.2091023871762
        },
        "data": {
          "type": "RetrievalQA",
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "llm",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "memory",
                "display_name": "Memory",
                "advanced": false,
                "input_types": [
                  "BaseChatMemory"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "retriever": {
                "trace_as_metadata": true,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "retriever",
                "display_name": "Retriever",
                "advanced": false,
                "input_types": [
                  "Retriever"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "chain_type": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Stuff",
                  "Map Reduce",
                  "Refine",
                  "Map Rerank"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Stuff",
                "name": "chain_type",
                "display_name": "Chain Type",
                "advanced": true,
                "dynamic": false,
                "info": "Chain type to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain.chains import RetrievalQA\n\nfrom langflow.base.chains.model import LCChainComponent\nfrom langflow.field_typing import Message\nfrom langflow.inputs import HandleInput, MultilineInput, BoolInput, DropdownInput\n\n\nclass RetrievalQAComponent(LCChainComponent):\n    display_name = \"Retrieval QA\"\n    description = \"Chain for question-answering querying sources from a retriever.\"\n    name = \"RetrievalQA\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\", display_name=\"Input\", info=\"The input value to pass to the chain.\", required=True\n        ),\n        DropdownInput(\n            name=\"chain_type\",\n            display_name=\"Chain Type\",\n            info=\"Chain type to use.\",\n            options=[\"Stuff\", \"Map Reduce\", \"Refine\", \"Map Rerank\"],\n            value=\"Stuff\",\n            advanced=True,\n        ),\n        HandleInput(name=\"llm\", display_name=\"Language Model\", input_types=[\"LanguageModel\"], required=True),\n        HandleInput(name=\"retriever\", display_name=\"Retriever\", input_types=[\"Retriever\"], required=True),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            input_types=[\"BaseChatMemory\"],\n        ),\n        BoolInput(\n            name=\"return_source_documents\",\n            display_name=\"Return Source Documents\",\n            value=False,\n        ),\n    ]\n\n    def invoke_chain(self) -> Message:\n        chain_type = self.chain_type.lower().replace(\" \", \"_\")\n        if self.memory:\n            self.memory.input_key = \"query\"\n            self.memory.output_key = \"result\"\n\n        runnable = RetrievalQA.from_chain_type(\n            llm=self.llm,\n            chain_type=chain_type,\n            retriever=self.retriever,\n            memory=self.memory,\n            # always include to help debugging\n            #\n            return_source_documents=True,\n        )\n\n        result = runnable.invoke({\"query\": self.input_value})\n\n        source_docs = self.to_data(result.get(\"source_documents\", []))\n        result_str = str(result.get(\"result\", \"\"))\n        if self.return_source_documents and len(source_docs):\n            references_str = self.create_references_from_data(source_docs)\n            result_str = \"\\n\".join([result_str, references_str])\n        # put the entire result to debug history, query and content\n        self.status = {**result, \"source_documents\": source_docs, \"output\": result_str}\n        return result_str\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input value to pass to the chain.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "return_source_documents": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "return_source_documents",
                "display_name": "Return Source Documents",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Chain for question-answering querying sources from a retriever.",
            "base_classes": [
              "Message"
            ],
            "display_name": "Retrieval QA",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Text",
                "method": "invoke_chain",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "chain_type",
              "llm",
              "retriever",
              "memory",
              "return_source_documents"
            ],
            "beta": false,
            "edited": false
          },
          "id": "RetrievalQA-x31qb"
        },
        "selected": false,
        "width": 384,
        "height": 542
      },
      {
        "id": "FAISS-AIcdj",
        "type": "genericNode",
        "position": {
          "x": 2737.034189470646,
          "y": 3467.225945988583
        },
        "data": {
          "type": "FAISS",
          "node": {
            "template": {
              "_type": "Component",
              "embedding": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "embedding",
                "display_name": "Embedding",
                "advanced": false,
                "input_types": [
                  "Embeddings"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "ingest_data": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "list": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "ingest_data",
                "display_name": "Ingest Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "allow_dangerous_deserialization": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "allow_dangerous_deserialization",
                "display_name": "Allow Dangerous Deserialization",
                "advanced": true,
                "dynamic": false,
                "info": "Set to True to allow loading pickle files from untrusted sources. Only enable this if you trust the source of the data.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import List\n\nfrom langchain_community.vectorstores import FAISS\nfrom loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import BoolInput, DataInput, HandleInput, IntInput, MultilineInput, StrInput\nfrom langflow.schema import Data\n\n\nclass FaissVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"\n    FAISS Vector Store with search capabilities\n    \"\"\"\n\n    display_name: str = \"FAISS\"\n    description: str = \"FAISS Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss\"\n    name = \"FAISS\"\n    icon = \"FAISS\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"pass\",\n            display_name=\"Pass\",\n            value=\"pass\",\n        ),\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            value=\"langflow_index\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n            info=\"Path to save the FAISS index. It will be relative to where Langflow is running.\",\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        BoolInput(\n            name=\"allow_dangerous_deserialization\",\n            display_name=\"Allow Dangerous Deserialization\",\n            info=\"Set to True to allow loading pickle files from untrusted sources. Only enable this if you trust the source of the data.\",\n            advanced=True,\n            value=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n    ]\n\n    def build_vector_store(self) -> FAISS:\n        \"\"\"\n        Builds the FAISS object.\n        \"\"\"\n        if not self.persist_directory:\n            raise ValueError(\"Folder path is required to save the FAISS index.\")\n        path = self.resolve_path(self.persist_directory)\n\n        documents = []\n\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        faiss = FAISS.from_documents(documents=documents, embedding=self.embedding)\n        faiss.save_local(str(path), self.index_name)\n\n        return faiss\n\n    def search_documents(self) -> List[Data]:\n        \"\"\"\n        Search for documents in the FAISS vector store.\n        \"\"\"\n        if not self.persist_directory:\n            raise ValueError(\"Folder path is required to load the FAISS index.\")\n        path = self.resolve_path(self.persist_directory)\n\n        vector_store = FAISS.load_local(\n            folder_path=path,\n            embeddings=self.embedding,\n            index_name=self.index_name,\n            allow_dangerous_deserialization=self.allow_dangerous_deserialization,\n        )\n\n        if not vector_store:\n            raise ValueError(\"Failed to load the FAISS index.\")\n\n        logger.debug(f\"Search input: {self.search_query}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            logger.debug(data)\n            return data  # Return the search results data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "index_name": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "langflow_secretaria_index",
                "name": "index_name",
                "display_name": "Index Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "number_of_results": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": 4,
                "name": "number_of_results",
                "display_name": "Number of Results",
                "advanced": true,
                "dynamic": false,
                "info": "Number of results to return.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "pass": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "pass",
                "display_name": "Pass",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "persist_directory": {
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "app/langflow/faiss/secretaria",
                "name": "persist_directory",
                "display_name": "Persist Directory",
                "advanced": false,
                "dynamic": false,
                "info": "Path to save the FAISS index. It will be relative to where Langflow is running.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "search_query": {
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "search_query",
                "display_name": "Search Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "FAISS Vector Store with search capabilities",
            "icon": "FAISS",
            "base_classes": [
              "Data",
              "Retriever",
              "VectorStore"
            ],
            "display_name": "FAISS",
            "documentation": "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Retriever"
                ],
                "selected": "Retriever",
                "name": "base_retriever",
                "display_name": "Retriever",
                "method": "build_base_retriever",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "search_results",
                "display_name": "Search Results",
                "method": "search_documents",
                "value": "__UNDEFINED__",
                "cache": true
              },
              {
                "types": [
                  "VectorStore"
                ],
                "selected": "VectorStore",
                "name": "vector_store",
                "display_name": "Vector Store",
                "method": "cast_vector_store",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "pass",
              "index_name",
              "persist_directory",
              "search_query",
              "ingest_data",
              "allow_dangerous_deserialization",
              "embedding",
              "number_of_results"
            ],
            "beta": false,
            "edited": true
          },
          "id": "FAISS-AIcdj"
        },
        "selected": false,
        "width": 384,
        "height": 741
      },
      {
        "id": "File-6PUo9",
        "type": "genericNode",
        "position": {
          "x": 2287.872114783381,
          "y": 3410.5031572087278
        },
        "data": {
          "type": "File",
          "node": {
            "template": {
              "_type": "Component",
              "path": {
                "trace_as_metadata": true,
                "file_path": "9b5ed423-36a5-4d15-98f0-9f971500972e/langflow.txt",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "path",
                "display_name": "Path",
                "advanced": false,
                "dynamic": false,
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "silent_errors": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": false,
                "name": "silent_errors",
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "A generic file loader.",
            "icon": "file-text",
            "base_classes": [
              "Data"
            ],
            "display_name": "File",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": true,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_file",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "path",
              "silent_errors"
            ],
            "beta": false,
            "edited": false
          },
          "id": "File-6PUo9"
        },
        "selected": false,
        "width": 384,
        "height": 298
      },
      {
        "id": "ChatOutput-ALB0q",
        "type": "genericNode",
        "position": {
          "x": 4410.845668293212,
          "y": 6534.728601824536
        },
        "data": {
          "type": "ChatOutput",
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "{text}",
                "name": "data_template",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "input_value",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "sender": {
                "combobox": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "Machine",
                "name": "sender",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "AI",
                "name": "sender_name",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": "",
                "name": "session_id",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "value": true,
                "name": "should_store_message",
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "ChatOutput",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template"
            ],
            "beta": false,
            "edited": false
          },
          "id": "ChatOutput-ALB0q"
        },
        "selected": false,
        "width": 384,
        "height": 326
      }
    ],
    "edges": [
      {
        "source": "Prompt-RS4Lh",
        "target": "OllamaModel-QMYxK",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-RS4Lhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-QMYxKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-RS4Lh{œdataTypeœ:œPromptœ,œidœ:œPrompt-RS4Lhœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-QMYxK{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-QMYxKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-QMYxK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-RS4Lh",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-QMYxK",
        "target": "ConditionalRouter-5yDIk",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-QMYxKœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-5yDIkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-QMYxK{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-QMYxKœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-5yDIk{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-5yDIkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-5yDIk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-QMYxK",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-gWxgO",
        "target": "OllamaModel-MAy54",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-gWxgOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-MAy54œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-gWxgO{œdataTypeœ:œPromptœ,œidœ:œPrompt-gWxgOœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-MAy54{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-MAy54œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-MAy54",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-gWxgO",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresInsert-fVmTW",
        "target": "ChatOutput-1Yq6Z",
        "sourceHandle": "{œdataTypeœ:œPostgresInsertœ,œidœ:œPostgresInsert-fVmTWœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œPassœ,œidœ:œChatOutput-1Yq6Zœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresInsert-fVmTW{œdataTypeœ:œPostgresInsertœ,œidœ:œPostgresInsert-fVmTWœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ChatOutput-1Yq6Z{œfieldNameœ:œPassœ,œidœ:œChatOutput-1Yq6Zœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Pass",
            "id": "ChatOutput-1Yq6Z",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresInsert",
            "id": "PostgresInsert-fVmTW",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatInput-GDLZG",
        "target": "ParseData-eojHH",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-GDLZGœ,œnameœ:œmessage_with_session_idœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-eojHHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ChatInput-GDLZG{œdataTypeœ:œChatInputœ,œidœ:œChatInput-GDLZGœ,œnameœ:œmessage_with_session_idœ,œoutput_typesœ:[œDataœ]}-ParseData-eojHH{œfieldNameœ:œdataœ,œidœ:œParseData-eojHHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-eojHH",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-GDLZG",
            "name": "message_with_session_id",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatInput-GDLZG",
        "target": "ParseData-9cpmu",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-GDLZGœ,œnameœ:œmessage_with_session_idœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-9cpmuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ChatInput-GDLZG{œdataTypeœ:œChatInputœ,œidœ:œChatInput-GDLZGœ,œnameœ:œmessage_with_session_idœ,œoutput_typesœ:[œDataœ]}-ParseData-9cpmu{œfieldNameœ:œdataœ,œidœ:œParseData-9cpmuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-9cpmu",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-GDLZG",
            "name": "message_with_session_id",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-eojHH",
        "target": "PostgresConditionalRouter-EC1d1",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-eojHHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-eojHH{œdataTypeœ:œParseDataœ,œidœ:œParseData-eojHHœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresConditionalRouter-EC1d1{œfieldNameœ:œmessageœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "PostgresConditionalRouter-EC1d1",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-eojHH",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-9cpmu",
        "target": "PostgresConditionalRouter-EC1d1",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-9cpmuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-9cpmu{œdataTypeœ:œParseDataœ,œidœ:œParseData-9cpmuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresConditionalRouter-EC1d1{œfieldNameœ:œsession_idœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresConditionalRouter-EC1d1",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-9cpmu",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Memory-Ow7qB",
        "target": "Prompt-RS4Lh",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-Ow7qBœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-RS4Lhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Memory-Ow7qB{œdataTypeœ:œMemoryœ,œidœ:œMemory-Ow7qBœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-RS4Lh{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-RS4Lhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "chat_memory",
            "id": "Prompt-RS4Lh",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-Ow7qB",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-xkWDp",
        "target": "ParseData-W0kuk",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-W0kukœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-xkWDp{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-ParseData-W0kuk{œfieldNameœ:œdataœ,œidœ:œParseData-W0kukœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-W0kuk",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-xkWDp",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-xkWDp",
        "target": "ParseData-wBgty",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-wBgtyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-xkWDp{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-ParseData-wBgty{œfieldNameœ:œdataœ,œidœ:œParseData-wBgtyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-wBgty",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-xkWDp",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-xkWDp",
        "target": "ParseData-C2RQ8",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-C2RQ8œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-xkWDp{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-ParseData-C2RQ8{œfieldNameœ:œdataœ,œidœ:œParseData-C2RQ8œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-C2RQ8",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-xkWDp",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-W0kuk",
        "target": "Prompt-gWxgO",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-W0kukœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfull_nameœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-W0kuk{œdataTypeœ:œParseDataœ,œidœ:œParseData-W0kukœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-gWxgO{œfieldNameœ:œfull_nameœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "full_name",
            "id": "Prompt-gWxgO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-W0kuk",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-C2RQ8",
        "target": "Prompt-gWxgO",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-C2RQ8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œemailœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-C2RQ8{œdataTypeœ:œParseDataœ,œidœ:œParseData-C2RQ8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-gWxgO{œfieldNameœ:œemailœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "email",
            "id": "Prompt-gWxgO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-C2RQ8",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-wBgty",
        "target": "Prompt-gWxgO",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-wBgtyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œwhatsappœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-wBgty{œdataTypeœ:œParseDataœ,œidœ:œParseData-wBgtyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-gWxgO{œfieldNameœ:œwhatsappœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "whatsapp",
            "id": "Prompt-gWxgO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-wBgty",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-5yDIk",
        "target": "ParseData-YPbzi",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-YPbziœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ConditionalRouter-5yDIk{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-YPbzi{œfieldNameœ:œdataœ,œidœ:œParseData-YPbziœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-YPbzi",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-5yDIk",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-YPbzi",
        "target": "PostgresInsert-fVmTW",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-YPbziœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresInsert-fVmTWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-YPbzi{œdataTypeœ:œParseDataœ,œidœ:œParseData-YPbziœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresInsert-fVmTW{œfieldNameœ:œsession_idœ,œidœ:œPostgresInsert-fVmTWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresInsert-fVmTW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-YPbzi",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-5yDIk",
        "target": "ParseData-lVm3b",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-lVm3bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ConditionalRouter-5yDIk{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-lVm3b{œfieldNameœ:œdataœ,œidœ:œParseData-lVm3bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-lVm3b",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-5yDIk",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-lVm3b",
        "target": "PostgresInsert-fVmTW",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-lVm3bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œestado_atendimentoœ,œidœ:œPostgresInsert-fVmTWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-lVm3b{œdataTypeœ:œParseDataœ,œidœ:œParseData-lVm3bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresInsert-fVmTW{œfieldNameœ:œestado_atendimentoœ,œidœ:œPostgresInsert-fVmTWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "estado_atendimento",
            "id": "PostgresInsert-fVmTW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-lVm3b",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Memory-uFr42",
        "target": "Prompt-gWxgO",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-uFr42œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Memory-uFr42{œdataTypeœ:œMemoryœ,œidœ:œMemory-uFr42œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-gWxgO{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-gWxgOœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "chat_memory",
            "id": "Prompt-gWxgO",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-uFr42",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pRooK",
        "target": "ChatOutput-PwtEn",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PwtEnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-pRooK{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-PwtEn{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-PwtEnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-PwtEn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pRooK",
            "name": "hello",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-MAy54",
        "target": "ConditionalRouter-pRooK",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-MAy54œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-pRooKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-MAy54{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-MAy54œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-pRooK{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-pRooKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-pRooK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-MAy54",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pRooK",
        "target": "ParseData-uQXKT",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-uQXKTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ConditionalRouter-pRooK{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-uQXKT{œfieldNameœ:œdataœ,œidœ:œParseData-uQXKTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-uQXKT",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pRooK",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-uQXKT",
        "target": "PostgresUpdate-uxvId",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-uQXKTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œestado_atendimentoœ,œidœ:œPostgresUpdate-uxvIdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-uQXKT{œdataTypeœ:œParseDataœ,œidœ:œParseData-uQXKTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-uxvId{œfieldNameœ:œestado_atendimentoœ,œidœ:œPostgresUpdate-uxvIdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "estado_atendimento",
            "id": "PostgresUpdate-uxvId",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-uQXKT",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pRooK",
        "target": "ParseData-poiA4",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-poiA4œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ConditionalRouter-pRooK{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pRooKœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-poiA4{œfieldNameœ:œdataœ,œidœ:œParseData-poiA4œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-poiA4",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pRooK",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-poiA4",
        "target": "PostgresUpdate-uxvId",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-poiA4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-uxvIdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-poiA4{œdataTypeœ:œParseDataœ,œidœ:œParseData-poiA4œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-uxvId{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-uxvIdœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresUpdate-uxvId",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-poiA4",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresUpdate-uxvId",
        "target": "ChatOutput-WoFSp",
        "sourceHandle": "{œdataTypeœ:œPostgresUpdateœ,œidœ:œPostgresUpdate-uxvIdœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œPassœ,œidœ:œChatOutput-WoFSpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresUpdate-uxvId{œdataTypeœ:œPostgresUpdateœ,œidœ:œPostgresUpdate-uxvIdœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ChatOutput-WoFSp{œfieldNameœ:œPassœ,œidœ:œChatOutput-WoFSpœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Pass",
            "id": "ChatOutput-WoFSp",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresUpdate",
            "id": "PostgresUpdate-uxvId",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-r1OTP",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_3_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-r1OTPœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_3_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-r1OTP{œfieldNameœ:œdataœ,œidœ:œParseData-r1OTPœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-r1OTP",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_3_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-Zwsfq",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_3_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Zwsfqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_3_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-Zwsfq{œfieldNameœ:œdataœ,œidœ:œParseData-Zwsfqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Zwsfq",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_3_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-fZPhy",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-fZPhyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-fZPhy{œfieldNameœ:œdataœ,œidœ:œParseData-fZPhyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-fZPhy",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "false_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-U8XDu",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-U8XDuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-U8XDu{œfieldNameœ:œdataœ,œidœ:œParseData-U8XDuœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-U8XDu",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "false_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-fZPhy",
        "target": "ConditionalRouter-5yDIk",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-fZPhyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_id_inputœ,œidœ:œConditionalRouter-5yDIkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-fZPhy{œdataTypeœ:œParseDataœ,œidœ:œParseData-fZPhyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-5yDIk{œfieldNameœ:œsession_id_inputœ,œidœ:œConditionalRouter-5yDIkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id_input",
            "id": "ConditionalRouter-5yDIk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-fZPhy",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-UW2iX",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_1_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-UW2iXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_1_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-UW2iX{œfieldNameœ:œdataœ,œidœ:œParseData-UW2iXœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-UW2iX",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_1_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-3Oncw",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_1_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-3Oncwœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_1_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-3Oncw{œfieldNameœ:œdataœ,œidœ:œParseData-3Oncwœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-3Oncw",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_1_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-3Oncw",
        "target": "ConditionalRouter-pRooK",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-3Oncwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_id_inputœ,œidœ:œConditionalRouter-pRooKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-3Oncw{œdataTypeœ:œParseDataœ,œidœ:œParseData-3Oncwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-pRooK{œfieldNameœ:œsession_id_inputœ,œidœ:œConditionalRouter-pRooKœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id_input",
            "id": "ConditionalRouter-pRooK",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-3Oncw",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-UW2iX",
        "target": "CustomerDetailsComponent-xkWDp",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-UW2iXœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-UW2iX{œdataTypeœ:œParseDataœ,œidœ:œParseData-UW2iXœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomerDetailsComponent-xkWDp{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-xkWDpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "customer_message",
            "id": "CustomerDetailsComponent-xkWDp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-UW2iX",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-r1OTP",
        "target": "DateTimeComponent-msIA6",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-r1OTPœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_messageœ,œidœ:œDateTimeComponent-msIA6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-r1OTP{œdataTypeœ:œParseDataœ,œidœ:œParseData-r1OTPœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DateTimeComponent-msIA6{œfieldNameœ:œinput_messageœ,œidœ:œDateTimeComponent-msIA6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_message",
            "id": "DateTimeComponent-msIA6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-r1OTP",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "DateTimeComponent-msIA6",
        "target": "ParseData-0ND0q",
        "sourceHandle": "{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-msIA6œ,œnameœ:œdatetime_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-0ND0qœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-DateTimeComponent-msIA6{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-msIA6œ,œnameœ:œdatetime_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-0ND0q{œfieldNameœ:œdataœ,œidœ:œParseData-0ND0qœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-0ND0q",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DateTimeComponent",
            "id": "DateTimeComponent-msIA6",
            "name": "datetime_output",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-OA7ek",
        "target": "OllamaModel-SHGLN",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OA7ekœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-SHGLNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-OA7ek{œdataTypeœ:œPromptœ,œidœ:œPrompt-OA7ekœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-SHGLN{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-SHGLNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-SHGLN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-OA7ek",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-0ND0q",
        "target": "Prompt-OA7ek",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-0ND0qœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdate_nowœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-0ND0q{œdataTypeœ:œParseDataœ,œidœ:œParseData-0ND0qœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-OA7ek{œfieldNameœ:œdate_nowœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "date_now",
            "id": "Prompt-OA7ek",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-0ND0q",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Memory-vu1W7",
        "target": "Prompt-OA7ek",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-vu1W7œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Memory-vu1W7{œdataTypeœ:œMemoryœ,œidœ:œMemory-vu1W7œ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-OA7ek{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "chat_memory",
            "id": "Prompt-OA7ek",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-vu1W7",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "DateTimeComponent-msIA6",
        "target": "Prompt-OA7ek",
        "sourceHandle": "{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-msIA6œ,œnameœ:œmessage_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-DateTimeComponent-msIA6{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-msIA6œ,œnameœ:œmessage_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-OA7ek{œfieldNameœ:œmessageœ,œidœ:œPrompt-OA7ekœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "Prompt-OA7ek",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "DateTimeComponent",
            "id": "DateTimeComponent-msIA6",
            "name": "message_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-lJbL7",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_2_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-lJbL7œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_2_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-lJbL7{œfieldNameœ:œdataœ,œidœ:œParseData-lJbL7œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-lJbL7",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_2_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-G1Pr7",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_2_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G1Pr7œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_2_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-G1Pr7{œfieldNameœ:œdataœ,œidœ:œParseData-G1Pr7œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G1Pr7",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_2_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-lJbL7",
        "target": "CustomerDetailsComponent-Sf4hp",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-lJbL7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-Sf4hpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-lJbL7{œdataTypeœ:œParseDataœ,œidœ:œParseData-lJbL7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomerDetailsComponent-Sf4hp{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-Sf4hpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "customer_message",
            "id": "CustomerDetailsComponent-Sf4hp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-lJbL7",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-lJbL7",
        "target": "PaginationComponent-IvzCI",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-lJbL7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œclient_dataœ,œidœ:œPaginationComponent-IvzCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-lJbL7{œdataTypeœ:œParseDataœ,œidœ:œParseData-lJbL7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PaginationComponent-IvzCI{œfieldNameœ:œclient_dataœ,œidœ:œPaginationComponent-IvzCIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "client_data",
            "id": "PaginationComponent-IvzCI",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-lJbL7",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-Sf4hp",
        "target": "ParseData-acAm1",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-Sf4hpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-acAm1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-Sf4hp{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-Sf4hpœ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-ParseData-acAm1{œfieldNameœ:œdataœ,œidœ:œParseData-acAm1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-acAm1",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-Sf4hp",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PaginationComponent-IvzCI",
        "target": "FindNextBookingComponent-lxxX9",
        "sourceHandle": "{œdataTypeœ:œPaginationComponentœ,œidœ:œPaginationComponent-IvzCIœ,œnameœ:œbookings_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbookings_dataœ,œidœ:œFindNextBookingComponent-lxxX9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PaginationComponent-IvzCI{œdataTypeœ:œPaginationComponentœ,œidœ:œPaginationComponent-IvzCIœ,œnameœ:œbookings_dataœ,œoutput_typesœ:[œDataœ]}-FindNextBookingComponent-lxxX9{œfieldNameœ:œbookings_dataœ,œidœ:œFindNextBookingComponent-lxxX9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "bookings_data",
            "id": "FindNextBookingComponent-lxxX9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PaginationComponent",
            "id": "PaginationComponent-IvzCI",
            "name": "bookings_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-acAm1",
        "target": "FindNextBookingComponent-lxxX9",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-acAm1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œclient_emailœ,œidœ:œFindNextBookingComponent-lxxX9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-acAm1{œdataTypeœ:œParseDataœ,œidœ:œParseData-acAm1œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-FindNextBookingComponent-lxxX9{œfieldNameœ:œclient_emailœ,œidœ:œFindNextBookingComponent-lxxX9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "client_email",
            "id": "FindNextBookingComponent-lxxX9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-acAm1",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "FindNextBookingComponent-lxxX9",
        "target": "ParseData-CUpkq",
        "sourceHandle": "{œdataTypeœ:œFindNextBookingComponentœ,œidœ:œFindNextBookingComponent-lxxX9œ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-CUpkqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-FindNextBookingComponent-lxxX9{œdataTypeœ:œFindNextBookingComponentœ,œidœ:œFindNextBookingComponent-lxxX9œ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-CUpkq{œfieldNameœ:œdataœ,œidœ:œParseData-CUpkqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-CUpkq",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FindNextBookingComponent",
            "id": "FindNextBookingComponent-lxxX9",
            "name": "booking_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "FindNextBookingComponent-lxxX9",
        "target": "ParseData-VSc7n",
        "sourceHandle": "{œdataTypeœ:œFindNextBookingComponentœ,œidœ:œFindNextBookingComponent-lxxX9œ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-VSc7nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-FindNextBookingComponent-lxxX9{œdataTypeœ:œFindNextBookingComponentœ,œidœ:œFindNextBookingComponent-lxxX9œ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-VSc7n{œfieldNameœ:œdataœ,œidœ:œParseData-VSc7nœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-VSc7n",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FindNextBookingComponent",
            "id": "FindNextBookingComponent-lxxX9",
            "name": "booking_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-tq6HS",
        "target": "OllamaModel-JqVWh",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-tq6HSœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-JqVWhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-tq6HS{œdataTypeœ:œPromptœ,œidœ:œPrompt-tq6HSœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-JqVWh{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-JqVWhœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-JqVWh",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-tq6HS",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-VSc7n",
        "target": "Prompt-tq6HS",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-VSc7nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdateœ,œidœ:œPrompt-tq6HSœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-VSc7n{œdataTypeœ:œParseDataœ,œidœ:œParseData-VSc7nœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-tq6HS{œfieldNameœ:œdateœ,œidœ:œPrompt-tq6HSœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "date",
            "id": "Prompt-tq6HS",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-VSc7n",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-JqVWh",
        "target": "ChatOutput-ieF9q",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-JqVWhœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ieF9qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-JqVWh{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-JqVWhœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-ieF9q{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ieF9qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-ieF9q",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-JqVWh",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-3b1Xk",
        "target": "ChatOutput-3fPb6",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-3b1Xkœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3fPb6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-3b1Xk{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-3b1Xkœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-3fPb6{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3fPb6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-3fPb6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-3b1Xk",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-ACbg6",
        "target": "ParseData-vQpJy",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-vQpJyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-ACbg6{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-ParseData-vQpJy{œfieldNameœ:œdataœ,œidœ:œParseData-vQpJyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-vQpJy",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-ACbg6",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CustomerDetailsComponent-ACbg6",
        "target": "CreateBookingComponent-WcKIZ",
        "sourceHandle": "{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œappointment_dataœ,œidœ:œCreateBookingComponent-WcKIZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CustomerDetailsComponent-ACbg6{œdataTypeœ:œCustomerDetailsComponentœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œnameœ:œformatted_jsonœ,œoutput_typesœ:[œDataœ]}-CreateBookingComponent-WcKIZ{œfieldNameœ:œappointment_dataœ,œidœ:œCreateBookingComponent-WcKIZœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "appointment_data",
            "id": "CreateBookingComponent-WcKIZ",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CustomerDetailsComponent",
            "id": "CustomerDetailsComponent-ACbg6",
            "name": "formatted_json",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-vQpJy",
        "target": "ScheduleCheckComponent-Zw3hU",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-vQpJyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-vQpJy{œdataTypeœ:œParseDataœ,œidœ:œParseData-vQpJyœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ScheduleCheckComponent-Zw3hU{œfieldNameœ:œdataœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ScheduleCheckComponent-Zw3hU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-vQpJy",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateBookingComponent-WcKIZ",
        "target": "ChatOutput-OfZfB",
        "sourceHandle": "{œdataTypeœ:œCreateBookingComponentœ,œidœ:œCreateBookingComponent-WcKIZœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œPassœ,œidœ:œChatOutput-OfZfBœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateBookingComponent-WcKIZ{œdataTypeœ:œCreateBookingComponentœ,œidœ:œCreateBookingComponent-WcKIZœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}-ChatOutput-OfZfB{œfieldNameœ:œPassœ,œidœ:œChatOutput-OfZfBœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Pass",
            "id": "ChatOutput-OfZfB",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateBookingComponent",
            "id": "CreateBookingComponent-WcKIZ",
            "name": "booking_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ScheduleCheckComponent-Zw3hU",
        "target": "ConditionalRouter-3b1Xk",
        "sourceHandle": "{œdataTypeœ:œScheduleCheckComponentœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-3b1Xkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ScheduleCheckComponent-Zw3hU{œdataTypeœ:œScheduleCheckComponentœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-3b1Xk{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-3b1Xkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-3b1Xk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ScheduleCheckComponent",
            "id": "ScheduleCheckComponent-Zw3hU",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ScheduleCheckComponent-Zw3hU",
        "target": "ConditionalRouter-3b1Xk",
        "sourceHandle": "{œdataTypeœ:œScheduleCheckComponentœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-3b1Xkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ScheduleCheckComponent-Zw3hU{œdataTypeœ:œScheduleCheckComponentœ,œidœ:œScheduleCheckComponent-Zw3hUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-3b1Xk{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-3b1Xkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-3b1Xk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ScheduleCheckComponent",
            "id": "ScheduleCheckComponent-Zw3hU",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-3b1Xk",
        "target": "CreateBookingComponent-WcKIZ",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-3b1Xkœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œCreateBookingComponent-WcKIZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-3b1Xk{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-3b1Xkœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-CreateBookingComponent-WcKIZ{œfieldNameœ:œpassœ,œidœ:œCreateBookingComponent-WcKIZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "CreateBookingComponent-WcKIZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-3b1Xk",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-SHGLN",
        "target": "ConditionalRouter-UTSSp",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-SHGLNœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-UTSSpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-SHGLN{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-SHGLNœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-UTSSp{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-UTSSpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-UTSSp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-SHGLN",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-UTSSp",
        "target": "CustomerDetailsComponent-ACbg6",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-UTSSpœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-UTSSp{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-UTSSpœ,œnameœ:œfalse_resultœ,œoutput_typesœ:[œMessageœ]}-CustomerDetailsComponent-ACbg6{œfieldNameœ:œcustomer_messageœ,œidœ:œCustomerDetailsComponent-ACbg6œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "customer_message",
            "id": "CustomerDetailsComponent-ACbg6",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-UTSSp",
            "name": "false_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-UTSSp",
        "target": "ChatOutput-xBOiG",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-UTSSpœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xBOiGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-UTSSp{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-UTSSpœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-xBOiG{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-xBOiGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-xBOiG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-UTSSp",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-SHGLN",
        "target": "ConditionalRouter-UTSSp",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-SHGLNœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-UTSSpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-SHGLN{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-SHGLNœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-UTSSp{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-UTSSpœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-UTSSp",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-SHGLN",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-Zwsfq",
        "target": "PostgresUpdate-gpILq",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Zwsfqœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-gpILqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-Zwsfq{œdataTypeœ:œParseDataœ,œidœ:œParseData-Zwsfqœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-gpILq{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-gpILqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresUpdate-gpILq",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Zwsfq",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatOutput-OfZfB",
        "target": "PostgresUpdate-gpILq",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-OfZfBœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresUpdate-gpILqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatOutput-OfZfB{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-OfZfBœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-gpILq{œfieldNameœ:œpassœ,œidœ:œPostgresUpdate-gpILqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresUpdate-gpILq",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-OfZfB",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-G1Pr7",
        "target": "PostgresUpdate-jBdCi",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-G1Pr7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-G1Pr7{œdataTypeœ:œParseDataœ,œidœ:œParseData-G1Pr7œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-jBdCi{œfieldNameœ:œsession_idœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresUpdate-jBdCi",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-G1Pr7",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-CUpkq",
        "target": "PostgresUpdate-jBdCi",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-CUpkqœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbooking_idœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-CUpkq{œdataTypeœ:œParseDataœ,œidœ:œParseData-CUpkqœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-jBdCi{œfieldNameœ:œbooking_idœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "booking_id",
            "id": "PostgresUpdate-jBdCi",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-CUpkq",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatOutput-ieF9q",
        "target": "PostgresUpdate-jBdCi",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-ieF9qœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatOutput-ieF9q{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-ieF9qœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PostgresUpdate-jBdCi{œfieldNameœ:œpassœ,œidœ:œPostgresUpdate-jBdCiœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresUpdate-jBdCi",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-ieF9q",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-56yZJ",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_4_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-56yZJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_4_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-56yZJ{œfieldNameœ:œdataœ,œidœ:œParseData-56yZJœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-56yZJ",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_4_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresConditionalRouter-EC1d1",
        "target": "ParseData-P8agU",
        "sourceHandle": "{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_4_resultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-P8agUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresConditionalRouter-EC1d1{œdataTypeœ:œPostgresConditionalRouterœ,œidœ:œPostgresConditionalRouter-EC1d1œ,œnameœ:œoption_4_resultœ,œoutput_typesœ:[œDataœ]}-ParseData-P8agU{œfieldNameœ:œdataœ,œidœ:œParseData-P8agUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-P8agU",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresConditionalRouter",
            "id": "PostgresConditionalRouter-EC1d1",
            "name": "option_4_result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-P8agU",
        "target": "DateTimeComponent-ILZqG",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-P8agUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_messageœ,œidœ:œDateTimeComponent-ILZqGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-P8agU{œdataTypeœ:œParseDataœ,œidœ:œParseData-P8agUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-DateTimeComponent-ILZqG{œfieldNameœ:œinput_messageœ,œidœ:œDateTimeComponent-ILZqGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_message",
            "id": "DateTimeComponent-ILZqG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-P8agU",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "DateTimeComponent-ILZqG",
        "target": "ParseData-AfjJT",
        "sourceHandle": "{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-ILZqGœ,œnameœ:œdatetime_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-AfjJTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-DateTimeComponent-ILZqG{œdataTypeœ:œDateTimeComponentœ,œidœ:œDateTimeComponent-ILZqGœ,œnameœ:œdatetime_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-AfjJT{œfieldNameœ:œdataœ,œidœ:œParseData-AfjJTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-AfjJT",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DateTimeComponent",
            "id": "DateTimeComponent-ILZqG",
            "name": "datetime_output",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Memory-sKNjq",
        "target": "Prompt-YyJ2n",
        "sourceHandle": "{œdataTypeœ:œMemoryœ,œidœ:œMemory-sKNjqœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Memory-sKNjq{œdataTypeœ:œMemoryœ,œidœ:œMemory-sKNjqœ,œnameœ:œmessages_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-YyJ2n{œfieldNameœ:œchat_memoryœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "chat_memory",
            "id": "Prompt-YyJ2n",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Memory",
            "id": "Memory-sKNjq",
            "name": "messages_text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-AfjJT",
        "target": "Prompt-YyJ2n",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-AfjJTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdate_nowœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-AfjJT{œdataTypeœ:œParseDataœ,œidœ:œParseData-AfjJTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YyJ2n{œfieldNameœ:œdate_nowœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "date_now",
            "id": "Prompt-YyJ2n",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-AfjJT",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-YyJ2n",
        "target": "OllamaModel-jumnw",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-YyJ2nœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-jumnwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-YyJ2n{œdataTypeœ:œPromptœ,œidœ:œPrompt-YyJ2nœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OllamaModel-jumnw{œfieldNameœ:œinput_valueœ,œidœ:œOllamaModel-jumnwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OllamaModel-jumnw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-YyJ2n",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-P8agU",
        "target": "Prompt-YyJ2n",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-P8agUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œlast_messageœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-P8agU{œdataTypeœ:œParseDataœ,œidœ:œParseData-P8agUœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-YyJ2n{œfieldNameœ:œlast_messageœ,œidœ:œPrompt-YyJ2nœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "last_message",
            "id": "Prompt-YyJ2n",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-P8agU",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-jumnw",
        "target": "ConditionalRouter-pG6AT",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-jumnwœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-pG6ATœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OllamaModel-jumnw{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-jumnwœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-pG6AT{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-pG6ATœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-pG6AT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-jumnw",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pG6AT",
        "target": "AppointmentDetailsComponent-ULLer",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œappointment_messageœ,œidœ:œAppointmentDetailsComponent-ULLerœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-pG6AT{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}-AppointmentDetailsComponent-ULLer{œfieldNameœ:œappointment_messageœ,œidœ:œAppointmentDetailsComponent-ULLerœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "appointment_message",
            "id": "AppointmentDetailsComponent-ULLer",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pG6AT",
            "name": "hello",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "EditBookingComponent-2Mi8s",
        "target": "ChatOutput-YY7SM",
        "sourceHandle": "{œdataTypeœ:œEditBookingComponentœ,œidœ:œEditBookingComponent-2Mi8sœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œPassœ,œidœ:œChatOutput-YY7SMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-EditBookingComponent-2Mi8s{œdataTypeœ:œEditBookingComponentœ,œidœ:œEditBookingComponent-2Mi8sœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}-ChatOutput-YY7SM{œfieldNameœ:œPassœ,œidœ:œChatOutput-YY7SMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Pass",
            "id": "ChatOutput-YY7SM",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "EditBookingComponent",
            "id": "EditBookingComponent-2Mi8s",
            "name": "booking_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pG6AT",
        "target": "PostgresQuery-qP9fO",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresQuery-qP9fOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-pG6AT{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}-PostgresQuery-qP9fO{œfieldNameœ:œpassœ,œidœ:œPostgresQuery-qP9fOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresQuery-qP9fO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pG6AT",
            "name": "hello",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-56yZJ",
        "target": "PostgresQuery-qP9fO",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresQuery-qP9fOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-56yZJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresQuery-qP9fO{œfieldNameœ:œsession_idœ,œidœ:œPostgresQuery-qP9fOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresQuery-qP9fO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-56yZJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "AppointmentDetailsComponent-ULLer",
        "target": "EditBookingComponent-2Mi8s",
        "sourceHandle": "{œdataTypeœ:œAppointmentDetailsComponentœ,œidœ:œAppointmentDetailsComponent-ULLerœ,œnameœ:œformatted_appointment_detailsœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œappointment_dataœ,œidœ:œEditBookingComponent-2Mi8sœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-AppointmentDetailsComponent-ULLer{œdataTypeœ:œAppointmentDetailsComponentœ,œidœ:œAppointmentDetailsComponent-ULLerœ,œnameœ:œformatted_appointment_detailsœ,œoutput_typesœ:[œDataœ]}-EditBookingComponent-2Mi8s{œfieldNameœ:œappointment_dataœ,œidœ:œEditBookingComponent-2Mi8sœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "appointment_data",
            "id": "EditBookingComponent-2Mi8s",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "AppointmentDetailsComponent",
            "id": "AppointmentDetailsComponent-ULLer",
            "name": "formatted_appointment_details",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresQuery-qP9fO",
        "target": "ParseData-Fxu7O",
        "sourceHandle": "{œdataTypeœ:œPostgresQueryœ,œidœ:œPostgresQuery-qP9fOœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Fxu7Oœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresQuery-qP9fO{œdataTypeœ:œPostgresQueryœ,œidœ:œPostgresQuery-qP9fOœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-Fxu7O{œfieldNameœ:œdataœ,œidœ:œParseData-Fxu7Oœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Fxu7O",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresQuery",
            "id": "PostgresQuery-qP9fO",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-Fxu7O",
        "target": "EditBookingComponent-2Mi8s",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Fxu7Oœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbooking_idœ,œidœ:œEditBookingComponent-2Mi8sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-Fxu7O{œdataTypeœ:œParseDataœ,œidœ:œParseData-Fxu7Oœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-EditBookingComponent-2Mi8s{œfieldNameœ:œbooking_idœ,œidœ:œEditBookingComponent-2Mi8sœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "booking_id",
            "id": "EditBookingComponent-2Mi8s",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Fxu7O",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pG6AT",
        "target": "ParseData-GGnNf",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-GGnNfœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ConditionalRouter-pG6AT{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-GGnNf{œfieldNameœ:œdataœ,œidœ:œParseData-GGnNfœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-GGnNf",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pG6AT",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "EditBookingComponent-l2ITT",
        "target": "ChatOutput-UkMfO",
        "sourceHandle": "{œdataTypeœ:œEditBookingComponentœ,œidœ:œEditBookingComponent-l2ITTœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œPassœ,œidœ:œChatOutput-UkMfOœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-EditBookingComponent-l2ITT{œdataTypeœ:œEditBookingComponentœ,œidœ:œEditBookingComponent-l2ITTœ,œnameœ:œbooking_dataœ,œoutput_typesœ:[œDataœ]}-ChatOutput-UkMfO{œfieldNameœ:œPassœ,œidœ:œChatOutput-UkMfOœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Pass",
            "id": "ChatOutput-UkMfO",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "EditBookingComponent",
            "id": "EditBookingComponent-l2ITT",
            "name": "booking_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "PostgresQuery-t6tEW",
        "target": "ParseData-XNcNQ",
        "sourceHandle": "{œdataTypeœ:œPostgresQueryœ,œidœ:œPostgresQuery-t6tEWœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-XNcNQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-PostgresQuery-t6tEW{œdataTypeœ:œPostgresQueryœ,œidœ:œPostgresQuery-t6tEWœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ParseData-XNcNQ{œfieldNameœ:œdataœ,œidœ:œParseData-XNcNQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-XNcNQ",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "PostgresQuery",
            "id": "PostgresQuery-t6tEW",
            "name": "result",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-XNcNQ",
        "target": "EditBookingComponent-l2ITT",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-XNcNQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œbooking_idœ,œidœ:œEditBookingComponent-l2ITTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-XNcNQ{œdataTypeœ:œParseDataœ,œidœ:œParseData-XNcNQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-EditBookingComponent-l2ITT{œfieldNameœ:œbooking_idœ,œidœ:œEditBookingComponent-l2ITTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "booking_id",
            "id": "EditBookingComponent-l2ITT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-XNcNQ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-GGnNf",
        "target": "PostgresQuery-t6tEW",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-GGnNfœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresQuery-t6tEWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-GGnNf{œdataTypeœ:œParseDataœ,œidœ:œParseData-GGnNfœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresQuery-t6tEW{œfieldNameœ:œpassœ,œidœ:œPostgresQuery-t6tEWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresQuery-t6tEW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-GGnNf",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-56yZJ",
        "target": "PostgresQuery-t6tEW",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresQuery-t6tEWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-56yZJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresQuery-t6tEW{œfieldNameœ:œsession_idœ,œidœ:œPostgresQuery-t6tEWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresQuery-t6tEW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-56yZJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-GGnNf",
        "target": "EditBookingComponent-l2ITT",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-GGnNfœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œstatusœ,œidœ:œEditBookingComponent-l2ITTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-GGnNf{œdataTypeœ:œParseDataœ,œidœ:œParseData-GGnNfœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-EditBookingComponent-l2ITT{œfieldNameœ:œstatusœ,œidœ:œEditBookingComponent-l2ITTœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "status",
            "id": "EditBookingComponent-l2ITT",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-GGnNf",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatOutput-UkMfO",
        "target": "PostgresDelete-AlCxk",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-UkMfOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresDelete-AlCxkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatOutput-UkMfO{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-UkMfOœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PostgresDelete-AlCxk{œfieldNameœ:œpassœ,œidœ:œPostgresDelete-AlCxkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresDelete-AlCxk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-UkMfO",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-56yZJ",
        "target": "PostgresDelete-AlCxk",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresDelete-AlCxkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-56yZJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresDelete-AlCxk{œfieldNameœ:œsession_idœ,œidœ:œPostgresDelete-AlCxkœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresDelete-AlCxk",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-56yZJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ChatOutput-YY7SM",
        "target": "PostgresDelete-17ckO",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-YY7SMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œPostgresDelete-17ckOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatOutput-YY7SM{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-YY7SMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PostgresDelete-17ckO{œfieldNameœ:œpassœ,œidœ:œPostgresDelete-17ckOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "PostgresDelete-17ckO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-YY7SM",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-56yZJ",
        "target": "PostgresDelete-17ckO",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsession_idœ,œidœ:œPostgresDelete-17ckOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-56yZJ{œdataTypeœ:œParseDataœ,œidœ:œParseData-56yZJœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-PostgresDelete-17ckO{œfieldNameœ:œsession_idœ,œidœ:œPostgresDelete-17ckOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "session_id",
            "id": "PostgresDelete-17ckO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-56yZJ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaEmbeddings-swqPQ",
        "target": "FAISS-AIcdj",
        "sourceHandle": "{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-swqPQœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-OllamaEmbeddings-swqPQ{œdataTypeœ:œOllamaEmbeddingsœ,œidœ:œOllamaEmbeddings-swqPQœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-FAISS-AIcdj{œfieldNameœ:œembeddingœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "embedding",
            "id": "FAISS-AIcdj",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OllamaEmbeddings",
            "id": "OllamaEmbeddings-swqPQ",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "RetrievalQA-x31qb",
        "target": "ChatOutput-a16He",
        "sourceHandle": "{œdataTypeœ:œRetrievalQAœ,œidœ:œRetrievalQA-x31qbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-a16Heœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-RetrievalQA-x31qb{œdataTypeœ:œRetrievalQAœ,œidœ:œRetrievalQA-x31qbœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-a16He{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-a16Heœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-a16He",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "RetrievalQA",
            "id": "RetrievalQA-x31qb",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "File-6PUo9",
        "target": "FAISS-AIcdj",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-6PUo9œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-File-6PUo9{œdataTypeœ:œFileœ,œidœ:œFile-6PUo9œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FAISS-AIcdj{œfieldNameœ:œingest_dataœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "FAISS-AIcdj",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "File",
            "id": "File-6PUo9",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-5yDIk",
        "target": "FAISS-AIcdj",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œpassœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-5yDIk{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-5yDIkœ,œnameœ:œhelloœ,œoutput_typesœ:[œMessageœ]}-FAISS-AIcdj{œfieldNameœ:œpassœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "pass",
            "id": "FAISS-AIcdj",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-5yDIk",
            "name": "hello",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "FAISS-AIcdj",
        "target": "RetrievalQA-x31qb",
        "sourceHandle": "{œdataTypeœ:œFAISSœ,œidœ:œFAISS-AIcdjœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}",
        "targetHandle": "{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-FAISS-AIcdj{œdataTypeœ:œFAISSœ,œidœ:œFAISS-AIcdjœ,œnameœ:œbase_retrieverœ,œoutput_typesœ:[œRetrieverœ]}-RetrievalQA-x31qb{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œRetrieverœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "retriever",
            "id": "RetrievalQA-x31qb",
            "inputTypes": [
              "Retriever"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FAISS",
            "id": "FAISS-AIcdj",
            "name": "base_retriever",
            "output_types": [
              "Retriever"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-U8XDu",
        "target": "Prompt-RS4Lh",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_messageœ,œidœ:œPrompt-RS4Lhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-U8XDu{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-RS4Lh{œfieldNameœ:œinput_messageœ,œidœ:œPrompt-RS4Lhœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_message",
            "id": "Prompt-RS4Lh",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-U8XDu",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-U8XDu",
        "target": "FAISS-AIcdj",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-U8XDu{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-FAISS-AIcdj{œfieldNameœ:œsearch_queryœ,œidœ:œFAISS-AIcdjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "search_query",
            "id": "FAISS-AIcdj",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-U8XDu",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OllamaModel-QMYxK",
        "target": "RetrievalQA-x31qb",
        "sourceHandle": "{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-QMYxKœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-OllamaModel-QMYxK{œdataTypeœ:œOllamaModelœ,œidœ:œOllamaModel-QMYxKœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-RetrievalQA-x31qb{œfieldNameœ:œllmœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "RetrievalQA-x31qb",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OllamaModel",
            "id": "OllamaModel-QMYxK",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-U8XDu",
        "target": "RetrievalQA-x31qb",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-U8XDu{œdataTypeœ:œParseDataœ,œidœ:œParseData-U8XDuœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-RetrievalQA-x31qb{œfieldNameœ:œinput_valueœ,œidœ:œRetrievalQA-x31qbœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "RetrievalQA-x31qb",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-U8XDu",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ConditionalRouter-pG6AT",
        "target": "ChatOutput-ALB0q",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œconfirmationœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ALB0qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ConditionalRouter-pG6AT{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-pG6ATœ,œnameœ:œconfirmationœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-ALB0q{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ALB0qœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-ALB0q",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-pG6AT",
            "name": "confirmation",
            "output_types": [
              "Message"
            ]
          }
        },
        "selected": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": -513.8389861923977,
      "y": 165.80670309230896,
      "zoom": 0.3262387369222399
    }
  },
  "folder_id": "1a38a2c8-cf78-411e-8284-b62d7ab7844e",
  "icon_bg_color": null,
  "updated_at": "2024-09-14T23:42:30+00:00",
  "webhook": false,
  "id": "b8c48268-de36-4c29-8b05-d1464a6ae5c9",
  "user_id": "6f01c696-e08c-4ac2-915d-a6ca2a0f86d0"
}